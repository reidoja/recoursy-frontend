[{"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\index.tsx":"1","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\reportWebVitals.ts":"2","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\App.tsx":"3","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\components\\Navbar\\Navbar.tsx":"4","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\Test.tsx":"5","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\PageNotFound\\PageNotFound.tsx":"6","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\components\\SelectInput\\SelectInput.tsx":"7","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\ViewDeliveryStatusPage\\ViewDeliveryStatusPage.tsx":"8","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\SetWorkingHourPage\\SetWorkingHourPage.tsx":"9","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\components\\CustomModal\\CustomModal.tsx":"10","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\ViewWorkingHourPage\\ViewWorkingHourPage.tsx":"11","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\ViewRequestPage\\ViewRequestPage.tsx":"12","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\ViewDeliveryHistoryPage\\ViewDeliveryHistoryPage.tsx":"13","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\RequestDeliveryPage\\RequestDeliveryPage.tsx":"14","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\HomePage\\HomePage.tsx":"15","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\LoginPage\\LoginPage.tsx":"16","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\routes\\MainRoute.tsx":"17","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\states\\UserState.ts":"18","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\queries\\auth\\useAuthenticate.ts":"19","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\auth\\authenticate.ts":"20","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\fetch.ts":"21","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\mutations\\mutationWrapper.ts":"22","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\auth\\login.ts":"23","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\components\\Loading\\Loading.tsx":"24","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\components\\ErrorBox\\ErrorBox.tsx":"25","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\mutations\\auth\\useLogin.ts":"26","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\mutations\\delivery\\useCreateDelivery.ts":"27","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\delivery\\createDelivery.ts":"28","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\utils\\cookies.ts":"29","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\utils\\getErrorResponse.ts":"30","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\queries\\delivery\\useFetchDeliveryHistory.ts":"31","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\queries\\queryWrapper.ts":"32","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\utils\\formatDateAndTime.ts":"33","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\delivery\\fetchDeliveryHistory.ts":"34","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\queries\\delivery\\useFetchRequest.ts":"35","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\delivery\\fetchRequest.ts":"36","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\mutations\\delivery\\useCancelDelivery.ts":"37","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\delivery\\cancelDelivery.ts":"38","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\queries\\workhour\\useFetchWorkHour.ts":"39","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\workhour\\fetchWorkHour.ts":"40"},{"size":671,"mtime":1611212279306,"results":"41","hashOfConfig":"42"},{"size":425,"mtime":499162500000,"results":"43","hashOfConfig":"42"},{"size":2225,"mtime":1611285737503,"results":"44","hashOfConfig":"42"},{"size":5772,"mtime":1611228397827,"results":"45","hashOfConfig":"42"},{"size":159,"mtime":1610685195696,"results":"46","hashOfConfig":"47"},{"size":481,"mtime":1611203267012,"results":"48","hashOfConfig":"42"},{"size":2451,"mtime":1610775481915,"results":"49","hashOfConfig":"42"},{"size":9128,"mtime":1611252160670,"results":"50","hashOfConfig":"42"},{"size":3074,"mtime":1610778399892,"results":"51","hashOfConfig":"42"},{"size":925,"mtime":1610777879271,"results":"52","hashOfConfig":"42"},{"size":2764,"mtime":1611249795879,"results":"53","hashOfConfig":"42"},{"size":4080,"mtime":1611246414908,"results":"54","hashOfConfig":"42"},{"size":3896,"mtime":1611244373918,"results":"55","hashOfConfig":"42"},{"size":6155,"mtime":1611246334216,"results":"56","hashOfConfig":"42"},{"size":4266,"mtime":1611119020468,"results":"57","hashOfConfig":"42"},{"size":4223,"mtime":1611285821699,"results":"58","hashOfConfig":"42"},{"size":1908,"mtime":1611119793827,"results":"59","hashOfConfig":"42"},{"size":187,"mtime":1611210226277,"results":"60","hashOfConfig":"42"},{"size":247,"mtime":1611212898442,"results":"61","hashOfConfig":"42"},{"size":169,"mtime":1611210884724,"results":"62","hashOfConfig":"42"},{"size":492,"mtime":1611223604922,"results":"63","hashOfConfig":"42"},{"size":796,"mtime":1611212744736,"results":"64","hashOfConfig":"42"},{"size":251,"mtime":1611214687367,"results":"65","hashOfConfig":"42"},{"size":1910,"mtime":1611212792416,"results":"66","hashOfConfig":"42"},{"size":801,"mtime":1611219436181,"results":"67","hashOfConfig":"42"},{"size":167,"mtime":1611222358320,"results":"68","hashOfConfig":"42"},{"size":403,"mtime":1611246289648,"results":"69","hashOfConfig":"42"},{"size":263,"mtime":1611222947240,"results":"70","hashOfConfig":"42"},{"size":773,"mtime":1611217271960,"results":"71","hashOfConfig":"42"},{"size":92,"mtime":1611219282798,"results":"72","hashOfConfig":"42"},{"size":302,"mtime":1611246269641,"results":"73","hashOfConfig":"42"},{"size":132,"mtime":1611204069810,"results":"74","hashOfConfig":"42"},{"size":184,"mtime":1611244333755,"results":"75","hashOfConfig":"42"},{"size":286,"mtime":1611249158111,"results":"76","hashOfConfig":"42"},{"size":270,"mtime":1611246271552,"results":"77","hashOfConfig":"42"},{"size":283,"mtime":1611249154274,"results":"78","hashOfConfig":"42"},{"size":403,"mtime":1611246329475,"results":"79","hashOfConfig":"42"},{"size":261,"mtime":1611246542747,"results":"80","hashOfConfig":"42"},{"size":289,"mtime":1611249497372,"results":"81","hashOfConfig":"42"},{"size":271,"mtime":1611249527443,"results":"82","hashOfConfig":"42"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},"uhryhw",{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"85"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"10uouey",{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"85"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"85"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"85"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"85"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"85"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"85"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"85"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"85"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"85"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"85"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\index.tsx",[],["175","176"],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\reportWebVitals.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\App.tsx",["177","178","179"],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\components\\Navbar\\Navbar.tsx",["180","181","182","183"],"import {\r\n  AppBar,\r\n  Box,\r\n  Button,\r\n  IconButton,\r\n  List,\r\n  ListItem,\r\n  makeStyles,\r\n  Menu,\r\n  Theme,\r\n  Toolbar,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport React, { ReactElement, useState } from 'react';\r\nimport NotificationsActiveIcon from '@material-ui/icons/NotificationsActive';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\r\nimport { useHistory } from 'react-router';\r\nimport { eraseCookie } from '../../utils/cookies';\r\nimport { useRecoilState, useSetRecoilState } from 'recoil';\r\nimport userState from '../../states/UserState';\r\ninterface Props {}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    color: theme.palette.common.white,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    cursor: 'pointer',\r\n  },\r\n  none: {\r\n    display: 'none',\r\n  },\r\n  overlay: {\r\n    top: '64px',\r\n    minHeight: 'calc(100vh - 64px)',\r\n    width: '100vw',\r\n    zIndex: 999,\r\n    position: 'fixed',\r\n    left: 0,\r\n    opacity: 1,\r\n    backgroundColor: 'rgba(50, 50, 50, 0.3)',\r\n    transition: 'opacity 350ms ease-in',\r\n  },\r\n  content: {\r\n    color: 'black',\r\n    transform: 'translteX(0)',\r\n    transition: 'transform 250ms ease-out',\r\n    height: 'calc(100vh - 64px)',\r\n    width: '250px',\r\n    backgroundColor: 'white',\r\n    overflow: 'auto',\r\n  },\r\n  hideOverlay: {\r\n    top: '64px',\r\n    minHeight: 'calc(100vh - 64px)',\r\n    width: '100vw',\r\n    zIndex: 999,\r\n    position: 'fixed',\r\n    left: 0,\r\n    backgroundColor: 'rgba(50, 50, 50, 0.3)',\r\n    transition: 'opacity 350ms ease-in',\r\n    opacity: 0,\r\n    pointerEvents: 'none',\r\n  },\r\n  hideSideBar: {\r\n    color: 'black',\r\n    transition: 'transform 250ms ease-out',\r\n    height: 'calc(100vh - 64px)',\r\n    width: '250px',\r\n    backgroundColor: 'white',\r\n    overflow: 'auto',\r\n    transform: 'translateX(-100%)',\r\n  },\r\n  listItem: {\r\n    cursor: 'pointer',\r\n    padding: '16px',\r\n    borderBottom: '1px solid rgba(50, 50, 50, 0.2)',\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n  },\r\n}));\r\n\r\nexport default function Navbar({}: Props): ReactElement {\r\n  const classes = useStyles();\r\n\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const [user, setUser] = useRecoilState(userState);\r\n\r\n  const history = useHistory();\r\n\r\n  console.log(user);\r\n\r\n  return (\r\n    <AppBar position=\"fixed\" className={classes.root}>\r\n      <Toolbar>\r\n        <IconButton\r\n          onClick={() => setIsOpen(!isOpen)}\r\n          edge=\"start\"\r\n          className={classes.menuButton}\r\n          color=\"inherit\"\r\n          aria-label=\"open drawer\">\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <Typography\r\n          onClick={() => history.push('/home')}\r\n          className={classes.title}\r\n          variant=\"h6\"\r\n          noWrap>\r\n          ReCourSy\r\n        </Typography>\r\n        <Typography>Hello, {user?.user.name}</Typography>\r\n        <Button\r\n          onClick={() => {\r\n            setUser(null);\r\n            eraseCookie('tkn');\r\n          }}\r\n          color=\"inherit\">\r\n          Logout\r\n        </Button>\r\n      </Toolbar>\r\n      <Box className={isOpen ? classes.overlay : classes.hideOverlay}>\r\n        <List className={isOpen ? classes.content : classes.hideSideBar}>\r\n          <ListItem\r\n            className={`${\r\n              user && user.user.role === 'user'\r\n                ? classes.none\r\n                : classes.listItem\r\n            }`}\r\n            onClick={() => {\r\n              history.push('/set-working-hour');\r\n              setIsOpen(false);\r\n            }}>\r\n            Set Working Hour <ArrowForwardIosIcon />\r\n          </ListItem>\r\n          <ListItem\r\n            onClick={() => {\r\n              history.push('/view-delivery-status');\r\n              setIsOpen(false);\r\n            }}\r\n            className={`${\r\n              user && user.user.role === 'user'\r\n                ? classes.none\r\n                : classes.listItem\r\n            }`}>\r\n            View Delivery Status <ArrowForwardIosIcon />\r\n          </ListItem>\r\n          <ListItem\r\n            className={\r\n              user && user.user.role === 'admin'\r\n                ? classes.none\r\n                : classes.listItem\r\n            }\r\n            onClick={() => {\r\n              history.push('/view-working-hour');\r\n              setIsOpen(false);\r\n            }}>\r\n            View Working Hour <ArrowForwardIosIcon />\r\n          </ListItem>\r\n          <ListItem\r\n            className={\r\n              user && user.user.role === 'admin'\r\n                ? classes.none\r\n                : classes.listItem\r\n            }\r\n            onClick={() => {\r\n              history.push('/view-request');\r\n              setIsOpen(false);\r\n            }}>\r\n            View Request <ArrowForwardIosIcon />\r\n          </ListItem>\r\n          <ListItem\r\n            className={\r\n              user && user.user.role === 'admin'\r\n                ? classes.none\r\n                : classes.listItem\r\n            }\r\n            onClick={() => {\r\n              history.push('/view-delivery-history');\r\n              setIsOpen(false);\r\n            }}>\r\n            View Delivery History <ArrowForwardIosIcon />\r\n          </ListItem>\r\n          <ListItem\r\n            className={\r\n              user && user.user.role === 'admin'\r\n                ? classes.none\r\n                : classes.listItem\r\n            }\r\n            onClick={() => {\r\n              history.push('/request-delivery');\r\n              setIsOpen(false);\r\n            }}>\r\n            Request Delivery <ArrowForwardIosIcon />\r\n          </ListItem>\r\n        </List>\r\n      </Box>\r\n    </AppBar>\r\n  );\r\n}\r\n","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\Test.tsx",["184"],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\PageNotFound\\PageNotFound.tsx",["185"],"import { Box, Typography } from '@material-ui/core';\r\nimport React, { ReactElement } from 'react';\r\n\r\ninterface Props {}\r\n\r\nexport default function PageNotFound({}: Props): ReactElement {\r\n  return (\r\n    <Box\r\n      display=\"flex\"\r\n      width=\"100%\"\r\n      height=\"100vh\"\r\n      flexDirection=\"column\"\r\n      alignItems=\"center\"\r\n      justifyContent=\"center\">\r\n      <Typography variant=\"h3\" color=\"error\">\r\n        404 Page Not Found\r\n      </Typography>\r\n    </Box>\r\n  );\r\n}\r\n","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\components\\SelectInput\\SelectInput.tsx",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\ViewDeliveryStatusPage\\ViewDeliveryStatusPage.tsx",["186","187","188","189","190"],"import {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  List,\r\n  ListItem,\r\n  makeStyles,\r\n  TextField,\r\n  Theme,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport React, { ReactElement, useEffect, useState } from 'react';\r\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\r\nimport SelectInput from '../../components/SelectInput/SelectInput';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  list: {\r\n    width: '100%',\r\n  },\r\n  listItem: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'flex-start',\r\n    width: '100%',\r\n    borderBottom: '1px solid rgba(50, 50, 50, 0.2)',\r\n  },\r\n  card: {\r\n    marginBottom: '24px',\r\n  },\r\n}));\r\n\r\nconst data = [\r\n  {\r\n    delivery_id: '12345',\r\n    date: 'Jan 16 2020',\r\n    from: '1305',\r\n    detail: [\r\n      {\r\n        item_name: 'Surat Peringatan',\r\n        to: '1405',\r\n        receiver: 'asd@gmail.com',\r\n        status: 'Pending',\r\n        note: 'Berkas warna coklat, tali merah',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    delivery_id: '12345',\r\n    date: 'Jan 16 2020',\r\n    from: '1305',\r\n    detail: [\r\n      {\r\n        item_name: 'Surat Peringatan',\r\n        to: '1405',\r\n        receiver: 'asd@gmail.com',\r\n        status: 'Pending',\r\n        note: 'Berkas warna coklat, tali merah',\r\n      },\r\n      {\r\n        item_name: 'Surat Peringatan',\r\n        to: '1405',\r\n        receiver: 'asd@gmail.com',\r\n        status: 'Pending',\r\n        note: 'Berkas warna coklat, tali merah',\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\ninterface Props {}\r\n\r\nexport default function ViewDeliveryStatusPage({}: Props): ReactElement {\r\n  const classes = useStyles();\r\n\r\n  const [listStatus, setListStatus] = useState<string[]>([]);\r\n\r\n  return (\r\n    <Box width=\"100%\" display=\"flex\" justifyContent=\"center\">\r\n      <Box width=\"100%\" p={2}>\r\n        <Box display=\"flex\" justifyContent=\"flex-start\" my={2}>\r\n          <Box width=\"50%\">\r\n            <Typography variant=\"h4\">View Pending Request</Typography>\r\n          </Box>\r\n          <Box width=\"50%\">\r\n            <Typography variant=\"h4\">View Delivered Request</Typography>\r\n          </Box>\r\n        </Box>\r\n        <Box width=\"100%\" display=\"flex\">\r\n          <Box width=\"50%\" p={2}>\r\n            {data.map((el, index) => (\r\n              <Card className={classes.card} key={index}>\r\n                <CardContent>\r\n                  <Box display=\"flex\" justifyContent=\"space-between\">\r\n                    <Typography>Delivery Id : {el.delivery_id}</Typography>\r\n                    <Typography>Date : {el.date}</Typography>\r\n                  </Box>\r\n                  <Box\r\n                    py={2}\r\n                    display=\"flex\"\r\n                    flexDirection=\"column\"\r\n                    alignItems=\"flex-start\">\r\n                    <Typography>From : {el.from}</Typography>\r\n                  </Box>\r\n                  <Box borderBottom=\"1px solid\" />\r\n                  <List className={classes.list}>\r\n                    {el.detail.map((el1, index) => (\r\n                      <ListItem className={classes.listItem} key={index}>\r\n                        <Box display=\"flex\" width=\"100%\">\r\n                          <Typography>Item Name : {el1.item_name}</Typography>\r\n                        </Box>\r\n                        <Box\r\n                          width=\"100%\"\r\n                          py={2}\r\n                          display=\"flex\"\r\n                          justifyContent=\"space-between\">\r\n                          <Box\r\n                            display=\"flex\"\r\n                            flexDirection=\"column\"\r\n                            alignItems=\"flex-start\">\r\n                            <Typography>To : {el1.to}</Typography>\r\n                            <Typography>Receiver : {el1.receiver}</Typography>\r\n                          </Box>\r\n                          <Box\r\n                            display=\"flex\"\r\n                            flexDirection=\"column\"\r\n                            justifyContent=\"flex-end\"\r\n                            width=\"163.2px\"\r\n                            pt={1}>\r\n                            <SelectInput\r\n                              label=\"Status\"\r\n                              value={el1.status}\r\n                              onChange={(e) => {}}\r\n                              options={[\r\n                                { value: 'Completed' },\r\n                                { value: 'Pending' },\r\n                                { value: 'Canceled' },\r\n                              ]}\r\n                            />\r\n                          </Box>\r\n                        </Box>\r\n                        <Box py={2} width=\"100%\">\r\n                          <TextField\r\n                            label=\"Note\"\r\n                            fullWidth\r\n                            multiline\r\n                            variant=\"outlined\"\r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                            value={el1.note}\r\n                            disabled\r\n                            InputProps={{\r\n                              rows: 2,\r\n                            }}\r\n                          />\r\n                        </Box>\r\n                      </ListItem>\r\n                    ))}\r\n                  </List>\r\n                  <Box width=\"100%\" display=\"flex\" justifyContent=\"flex-end\">\r\n                    <Button variant=\"contained\" color=\"primary\">\r\n                      Update\r\n                    </Button>\r\n                  </Box>\r\n                </CardContent>\r\n              </Card>\r\n            ))}\r\n          </Box>\r\n          <Box width=\"50%\" p={2}>\r\n            {data.map((el, index) => (\r\n              <Card className={classes.card} key={index}>\r\n                <CardContent>\r\n                  <Box display=\"flex\" justifyContent=\"space-between\">\r\n                    <Typography>Delivery Id : {el.delivery_id}</Typography>\r\n                    <Typography>Date : {el.date}</Typography>\r\n                  </Box>\r\n                  <Box\r\n                    py={2}\r\n                    display=\"flex\"\r\n                    flexDirection=\"column\"\r\n                    alignItems=\"flex-start\">\r\n                    <Typography>From : {el.from}</Typography>\r\n                  </Box>\r\n                  <Box borderBottom=\"1px solid\" />\r\n                  <List className={classes.list}>\r\n                    {el.detail.map((el1, index) => (\r\n                      <ListItem className={classes.listItem} key={index}>\r\n                        <Box display=\"flex\" width=\"100%\">\r\n                          <Typography>Item Name : {el1.item_name}</Typography>\r\n                        </Box>\r\n                        <Box\r\n                          width=\"100%\"\r\n                          py={2}\r\n                          display=\"flex\"\r\n                          justifyContent=\"space-between\">\r\n                          <Box\r\n                            display=\"flex\"\r\n                            flexDirection=\"column\"\r\n                            alignItems=\"flex-start\">\r\n                            <Typography>To : {el1.to}</Typography>\r\n                            <Typography>Receiver : {el1.receiver}</Typography>\r\n                          </Box>\r\n                          <Box\r\n                            display=\"flex\"\r\n                            flexDirection=\"column\"\r\n                            justifyContent=\"flex-end\"\r\n                            width=\"163.2px\"\r\n                            pt={1}>\r\n                            <SelectInput\r\n                              label=\"Status\"\r\n                              value={el1.status}\r\n                              onChange={(e) => {}}\r\n                              options={[\r\n                                { value: 'Completed' },\r\n                                { value: 'Pending' },\r\n                                { value: 'Canceled' },\r\n                              ]}\r\n                            />\r\n                          </Box>\r\n                        </Box>\r\n                        <Box py={2} width=\"100%\">\r\n                          <TextField\r\n                            label=\"Note\"\r\n                            fullWidth\r\n                            multiline\r\n                            variant=\"outlined\"\r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                            value={el1.note}\r\n                            disabled\r\n                            InputProps={{\r\n                              rows: 2,\r\n                            }}\r\n                          />\r\n                        </Box>\r\n                      </ListItem>\r\n                    ))}\r\n                  </List>\r\n                  <Box width=\"100%\" display=\"flex\" justifyContent=\"flex-end\">\r\n                    <Button variant=\"contained\" color=\"primary\">\r\n                      Update\r\n                    </Button>\r\n                  </Box>\r\n                </CardContent>\r\n              </Card>\r\n            ))}\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\SetWorkingHourPage\\SetWorkingHourPage.tsx",["191"],"import {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  IconButton,\r\n  List,\r\n  ListItem,\r\n  makeStyles,\r\n  TextField,\r\n  Theme,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport React, { ReactElement, useState } from 'react';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport CustomModal from '../../components/CustomModal/CustomModal';\r\n\r\ninterface Props {}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  list: {\r\n    width: '100%',\r\n  },\r\n  listItem: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n    width: '100%',\r\n    borderBottom: '1px solid rgba(50, 50, 50, 0.2)',\r\n  },\r\n}));\r\n\r\nconst data = [\r\n  {\r\n    from: '09.00',\r\n    to: '12.00',\r\n  },\r\n  {\r\n    from: '09.00',\r\n    to: '12.00',\r\n  },\r\n];\r\n\r\nexport default function SetWorkingHourPage({}: Props): ReactElement {\r\n  const classes = useStyles();\r\n\r\n  const [isOpenModal, setIsOpenModal] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <CustomModal\r\n        handleClose={() => setIsOpenModal(false)}\r\n        open={isOpenModal}\r\n        width={600}>\r\n        <Box width=\"100%\">\r\n          <Typography variant=\"h6\">Add Working Hour</Typography>\r\n          <Box py={2} display=\"flex\" alignItems=\"center\">\r\n            <Typography>From :</Typography>\r\n            <TextField type=\"time\" />\r\n          </Box>\r\n          <Box py={2} display=\"flex\" alignItems=\"center\">\r\n            <Typography>To :</Typography>\r\n            <TextField type=\"time\" />\r\n          </Box>\r\n          <Box width=\"100%\" display=\"flex\" justifyContent=\"flex-end\">\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => setIsOpenModal(false)}>\r\n              Add\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      </CustomModal>\r\n      <Box width=\"100%\" display=\"flex\" justifyContent=\"center\">\r\n        <Box width=\"80%\" p={2}>\r\n          <Box display=\"flex\" justifyContent=\"flex-start\" my={2}>\r\n            <Typography variant=\"h4\">Working Hour</Typography>\r\n          </Box>\r\n          <Box width=\"100%\" display=\"flex\" justifyContent=\"flex-end\" my={2}>\r\n            <Button\r\n              onClick={() => setIsOpenModal(true)}\r\n              variant=\"contained\"\r\n              color=\"primary\">\r\n              + Add Working Hour\r\n            </Button>\r\n          </Box>\r\n          <Card>\r\n            <CardContent>\r\n              <List>\r\n                {data.map((el, index) => (\r\n                  <ListItem key={index} className={classes.listItem}>\r\n                    <Box>\r\n                      <Typography>From : {el.from}</Typography>\r\n                      <Typography>To : {el.to}</Typography>\r\n                    </Box>\r\n                    <IconButton size=\"small\" onClick={() => {}}>\r\n                      <DeleteIcon fontSize=\"small\" color=\"error\" />\r\n                    </IconButton>\r\n                  </ListItem>\r\n                ))}\r\n              </List>\r\n            </CardContent>\r\n          </Card>\r\n        </Box>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\components\\CustomModal\\CustomModal.tsx",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\ViewWorkingHourPage\\ViewWorkingHourPage.tsx",["192","193"],"import {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  IconButton,\r\n  List,\r\n  ListItem,\r\n  makeStyles,\r\n  TextField,\r\n  Theme,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport React, { ReactElement, useState } from 'react';\r\nimport useFetchWorkHour from '../../effects/queries/workhour/useFetchWorkHour';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\ninterface Props {}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  list: {\r\n    width: '100%',\r\n  },\r\n  listItem: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'flex-start',\r\n    width: '100%',\r\n    borderBottom: '1px solid rgba(50, 50, 50, 0.2)',\r\n  },\r\n  card: {\r\n    marginBottom: '24px',\r\n  },\r\n  searchIcon: {\r\n    color: theme.palette.primary.main,\r\n  },\r\n}));\r\n\r\nexport default function ViewWorkingHourPage({}: Props): ReactElement {\r\n  const classes = useStyles();\r\n\r\n  const [search, setSearch] = useState('');\r\n  const [thisSearch, setThisSearch] = useState('');\r\n\r\n  const { data: dataWorkHour, error: errorWorkHour } = useFetchWorkHour(search);\r\n\r\n  return (\r\n    <Box width=\"100%\" display=\"flex\" justifyContent=\"center\">\r\n      <Box width=\"80%\" p={2}>\r\n        <Box display=\"flex\" justifyContent=\"flex-start\" my={2}>\r\n          <Typography variant=\"h4\">Working Hour</Typography>\r\n        </Box>\r\n        <Box width=\"100%\" display=\"flex\" justifyContent=\"flex-end\" py={2}>\r\n          <TextField\r\n            value={thisSearch}\r\n            onChange={(e) => {\r\n              const value = e.target.value;\r\n              setThisSearch(value);\r\n            }}\r\n            type=\"text\"\r\n            onKeyPress={(ev) => {\r\n              if (ev.key === 'Enter') {\r\n                setSearch(thisSearch);\r\n              }\r\n            }}\r\n            variant=\"outlined\"\r\n            InputProps={{\r\n              endAdornment: (\r\n                <IconButton\r\n                  onClick={() => {\r\n                    setSearch(thisSearch);\r\n                  }}\r\n                  size=\"small\"\r\n                  className={classes.searchIcon}>\r\n                  <SearchIcon color=\"inherit\" />\r\n                </IconButton>\r\n              ),\r\n            }}\r\n            placeholder=\"Search...\"\r\n          />\r\n        </Box>\r\n        <Card>\r\n          <CardContent>\r\n            <List>\r\n              {dataWorkHour &&\r\n                dataWorkHour.map((el, index) => (\r\n                  <ListItem key={index} className={classes.listItem}>\r\n                    <Box>\r\n                      <Typography>From : {el.from}</Typography>\r\n                      <Typography>To : {el.to}</Typography>\r\n                    </Box>\r\n                  </ListItem>\r\n                ))}\r\n            </List>\r\n          </CardContent>\r\n        </Card>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\ViewRequestPage\\ViewRequestPage.tsx",["194","195","196","197","198","199"],"import {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  List,\r\n  ListItem,\r\n  makeStyles,\r\n  TextField,\r\n  Theme,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport React, { ReactElement } from 'react';\r\nimport useCancelDelivery from '../../effects/mutations/delivery/useCancelDelivery';\r\nimport useFetchRequest from '../../effects/queries/delivery/useFetchRequest';\r\nimport formatDateAndTime from '../../utils/formatDateAndTime';\r\n\r\ninterface Props {}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  list: {\r\n    width: '100%',\r\n  },\r\n  listItem: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'flex-start',\r\n    width: '100%',\r\n    borderBottom: '1px solid rgba(50, 50, 50, 0.2)',\r\n  },\r\n  card: {\r\n    marginBottom: '24px',\r\n  },\r\n}));\r\n\r\nexport default function ViewRequestPage({}: Props): ReactElement {\r\n  const classes = useStyles();\r\n\r\n  const { data: dataRequest } = useFetchRequest();\r\n  const [\r\n    cancelDelivery,\r\n    {\r\n      isLoading: isDeliveryLoading,\r\n      error: deliveryError,\r\n      status: deliveryStatus,\r\n    },\r\n  ] = useCancelDelivery();\r\n\r\n  return (\r\n    <Box width=\"100%\" display=\"flex\" justifyContent=\"center\">\r\n      <Box width=\"80%\" p={2}>\r\n        <Box display=\"flex\" justifyContent=\"flex-start\" my={2}>\r\n          <Typography variant=\"h4\">View Request</Typography>\r\n        </Box>\r\n        {dataRequest &&\r\n          dataRequest.map((el) => (\r\n            <>\r\n              {el.details.map((el1, index) => (\r\n                <Card className={classes.card} key={index}>\r\n                  <CardContent>\r\n                    <Box display=\"flex\" justifyContent=\"space-between\">\r\n                      <Typography>Delivery Id : {el.id}</Typography>\r\n                      <Typography>\r\n                        Date : {formatDateAndTime(el.create_at)}\r\n                      </Typography>\r\n                    </Box>\r\n                    <Box\r\n                      py={2}\r\n                      display=\"flex\"\r\n                      flexDirection=\"row\"\r\n                      justifyContent=\"space-between\">\r\n                      <Typography>From : {el.from}</Typography>\r\n                      <Typography>To : {el1.room_destination}</Typography>\r\n                    </Box>\r\n                    <Box\r\n                      py={2}\r\n                      display=\"flex\"\r\n                      flexDirection=\"row\"\r\n                      justifyContent=\"space-between\">\r\n                      <Typography>Receiver : {el1.to}</Typography>\r\n                      <Typography>Status : {el1.status}</Typography>\r\n                    </Box>\r\n                    <Box\r\n                      display=\"flex\"\r\n                      flexDirection=\"column\"\r\n                      alignItems=\"flex-start\">\r\n                      <Typography>Item Name : {el1.itemName}</Typography>\r\n                      <Box width=\"100%\" py={1}>\r\n                        <TextField\r\n                          label=\"Note\"\r\n                          fullWidth\r\n                          multiline\r\n                          variant=\"outlined\"\r\n                          color=\"primary\"\r\n                          size=\"small\"\r\n                          value={el1.itemNote}\r\n                          disabled\r\n                          InputProps={{\r\n                            rows: 2,\r\n                          }}\r\n                        />\r\n                      </Box>\r\n                    </Box>\r\n                    <Box width=\"100%\" display=\"flex\" justifyContent=\"flex-end\">\r\n                      <Button\r\n                        onClick={() => {\r\n                          cancelDelivery(el1.id);\r\n                        }}\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        disabled={el1.status === 'delivered' ? true : false}>\r\n                        Cancel\r\n                      </Button>\r\n                    </Box>\r\n                  </CardContent>\r\n                </Card>\r\n              ))}\r\n            </>\r\n          ))}\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\ViewDeliveryHistoryPage\\ViewDeliveryHistoryPage.tsx",["200"],"import {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  List,\r\n  ListItem,\r\n  makeStyles,\r\n  TextField,\r\n  Theme,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport React, { ReactElement } from 'react';\r\nimport useFetchDeliveryHistory from '../../effects/queries/delivery/useFetchDeliveryHistory';\r\nimport formatDateAndTime from '../../utils/formatDateAndTime';\r\n\r\ninterface Props {}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  list: {\r\n    width: '100%',\r\n  },\r\n  listItem: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'flex-start',\r\n    width: '100%',\r\n    borderBottom: '1px solid rgba(50, 50, 50, 0.2)',\r\n  },\r\n  card: {\r\n    marginBottom: '24px',\r\n  },\r\n  none: {\r\n    display: 'none',\r\n  },\r\n}));\r\n\r\nexport default function ViewDeliveryHistoryPage({}: Props): ReactElement {\r\n  const classes = useStyles();\r\n\r\n  const { data: dataDelivery } = useFetchDeliveryHistory();\r\n\r\n  return (\r\n    <Box width=\"100%\" display=\"flex\" justifyContent=\"center\">\r\n      <Box width=\"80%\" p={2}>\r\n        <Box display=\"flex\" justifyContent=\"flex-start\" my={2}>\r\n          <Typography variant=\"h4\">View Delivery History</Typography>\r\n        </Box>\r\n        {dataDelivery &&\r\n          dataDelivery.map((el, index) => (\r\n            <Card\r\n              className={el.details.length < 1 ? classes.none : classes.card}\r\n              key={index}>\r\n              <CardContent>\r\n                <Box display=\"flex\" justifyContent=\"space-between\">\r\n                  <Typography>Delivery Id : {el.id}</Typography>\r\n                  <Typography>\r\n                    Date : {formatDateAndTime(el.create_at)}\r\n                  </Typography>\r\n                </Box>\r\n                <Box\r\n                  py={2}\r\n                  display=\"flex\"\r\n                  flexDirection=\"column\"\r\n                  alignItems=\"flex-start\">\r\n                  <Typography>From : {el.from}</Typography>\r\n                </Box>\r\n                <Box borderBottom=\"1px solid\" />\r\n                <List className={classes.list}>\r\n                  {el.details.map((el1, index) => (\r\n                    <ListItem className={classes.listItem} key={index}>\r\n                      <Box\r\n                        display=\"flex\"\r\n                        width=\"100%\"\r\n                        justifyContent=\"space-between\">\r\n                        <Typography>Item Name : {el1.itemName}</Typography>\r\n                        <Typography>Status : {el1.status}</Typography>\r\n                      </Box>\r\n                      <Box\r\n                        width=\"100%\"\r\n                        py={2}\r\n                        display=\"flex\"\r\n                        justifyContent=\"space-between\">\r\n                        <Box\r\n                          display=\"flex\"\r\n                          flexDirection=\"column\"\r\n                          alignItems=\"flex-start\">\r\n                          <Typography>To : {el1.to}</Typography>\r\n                          <Typography>Receiver : {el1.to}</Typography>\r\n                        </Box>\r\n                      </Box>\r\n                      <Box py={2} width=\"100%\">\r\n                        <TextField\r\n                          label=\"Note\"\r\n                          fullWidth\r\n                          multiline\r\n                          variant=\"outlined\"\r\n                          color=\"primary\"\r\n                          size=\"small\"\r\n                          value={el1.itemNote}\r\n                          disabled\r\n                          InputProps={{\r\n                            rows: 2,\r\n                          }}\r\n                        />\r\n                      </Box>\r\n                    </ListItem>\r\n                  ))}\r\n                </List>\r\n              </CardContent>\r\n            </Card>\r\n          ))}\r\n        {/* {data.map((el, index) => (\r\n          \r\n        ))} */}\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\RequestDeliveryPage\\RequestDeliveryPage.tsx",["201","202","203","204"],"import {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  IconButton,\r\n  makeStyles,\r\n  TextField,\r\n  Theme,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport React, { ReactElement, useState } from 'react';\r\nimport useCreateDelivery from '../../effects/mutations/delivery/useCreateDelivery';\r\nimport { PostDelivery } from '../../models/Delivery';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  addBtn: {\r\n    borderRadius: '20px',\r\n  },\r\n}));\r\n\r\ninterface Props {}\r\nexport default function RequestDeliveryPage({}: Props): ReactElement {\r\n  const classes = useStyles();\r\n\r\n  const [from, setFrom] = useState('');\r\n\r\n  const [detailRequest, setDetailRequest] = useState<\r\n    {\r\n      room_destination: string;\r\n      to: string;\r\n      itemName: string;\r\n      itemNote: string;\r\n    }[]\r\n  >([]);\r\n\r\n  const [\r\n    createDelivery,\r\n    {\r\n      isLoading: isDeliveryLoading,\r\n      error: deliveryError,\r\n      status: deliveryStatus,\r\n    },\r\n  ] = useCreateDelivery();\r\n\r\n  const handleSubmit = () => {\r\n    const data: PostDelivery = {\r\n      from: from,\r\n      details: detailRequest,\r\n    };\r\n    createDelivery(data);\r\n  };\r\n\r\n  return (\r\n    <Box width=\"100%\" display=\"flex\" justifyContent=\"center\">\r\n      <Box width=\"80%\" p={2}>\r\n        <Box display=\"flex\" justifyContent=\"flex-start\" my={2}>\r\n          <Typography variant=\"h4\">Request Delivery</Typography>\r\n        </Box>\r\n        <Card>\r\n          <CardContent>\r\n            <Box display=\"flex\" flexDirection=\"column\" alignItems=\"flex-start\">\r\n              <TextField\r\n                type=\"text\"\r\n                label=\"From\"\r\n                value={from}\r\n                onChange={(el) => {\r\n                  const value = el.target.value;\r\n                  setFrom(value);\r\n                }}\r\n              />\r\n              <Box py={2} width=\"100%\" display=\"flex\" justifyContent=\"flex-end\">\r\n                <Button\r\n                  className={classes.addBtn}\r\n                  variant=\"outlined\"\r\n                  onClick={() => {\r\n                    const newArr = {\r\n                      room_destination: '',\r\n                      to: '',\r\n                      itemName: '',\r\n                      itemNote: '',\r\n                    };\r\n                    setDetailRequest((oldArray) => [...oldArray, newArr]);\r\n                  }}>\r\n                  Add Item\r\n                </Button>\r\n              </Box>\r\n              {detailRequest.map((el, index) => (\r\n                <Box key={index} width=\"100%\" borderBottom=\"1px solid\" py={2}>\r\n                  <Box width=\"100%\" display=\"flex\" justifyContent=\"flex-end\">\r\n                    <IconButton\r\n                      size=\"small\"\r\n                      onClick={() => {\r\n                        const newArr = detailRequest.filter(\r\n                          (el, idx) => idx !== index\r\n                        );\r\n                        setDetailRequest(newArr);\r\n                      }}>\r\n                      <DeleteIcon fontSize=\"small\" color=\"error\" />\r\n                    </IconButton>\r\n                  </Box>\r\n                  <Box\r\n                    py={2}\r\n                    width=\"100%\"\r\n                    display=\"flex\"\r\n                    justifyContent=\"space-between\">\r\n                    <TextField\r\n                      onChange={(e) => {\r\n                        const value = e.target.value;\r\n                        let newArr = [...detailRequest];\r\n                        newArr[index].room_destination = value;\r\n                        setDetailRequest(newArr);\r\n                      }}\r\n                      value={el.room_destination}\r\n                      variant=\"outlined\"\r\n                      type=\"text\"\r\n                      label=\"To\"\r\n                    />\r\n                    <TextField\r\n                      onChange={(e) => {\r\n                        const value = e.target.value;\r\n                        let newArr = [...detailRequest];\r\n                        newArr[index].to = value;\r\n                        setDetailRequest(newArr);\r\n                      }}\r\n                      value={el.to}\r\n                      type=\"text\"\r\n                      variant=\"outlined\"\r\n                      label=\"Receiver\"\r\n                    />\r\n                  </Box>\r\n                  <Box\r\n                    width=\"100%\"\r\n                    display=\"flex\"\r\n                    flexDirection=\"column\"\r\n                    alignItems=\"flex-start\">\r\n                    <Box py={2}>\r\n                      <TextField\r\n                        onChange={(e) => {\r\n                          const value = e.target.value;\r\n                          let newArr = [...detailRequest];\r\n                          newArr[index].itemName = value;\r\n                          setDetailRequest(newArr);\r\n                        }}\r\n                        value={el.itemName}\r\n                        type=\"text\"\r\n                        variant=\"outlined\"\r\n                        label=\"Item\"\r\n                      />\r\n                    </Box>\r\n                    <TextField\r\n                      fullWidth\r\n                      onChange={(e) => {\r\n                        const value = e.target.value;\r\n                        let newArr = [...detailRequest];\r\n                        newArr[index].itemNote = value;\r\n                        setDetailRequest(newArr);\r\n                      }}\r\n                      multiline\r\n                      variant=\"outlined\"\r\n                      value={el.itemNote}\r\n                      type=\"text\"\r\n                      label=\"Note\"\r\n                      InputProps={{\r\n                        rows: 3,\r\n                      }}\r\n                    />\r\n                  </Box>\r\n                </Box>\r\n              ))}\r\n            </Box>\r\n          </CardContent>\r\n        </Card>\r\n        <Box width=\"100%\" py={2} display=\"flex\" justifyContent=\"flex-end\">\r\n          <Button onClick={handleSubmit} variant=\"contained\" color=\"primary\">\r\n            Request\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\HomePage\\HomePage.tsx",["205"],"import {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  makeStyles,\r\n  Theme,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport React, { ReactElement } from 'react';\r\nimport { useHistory } from 'react-router';\r\n\r\ninterface Props {}\r\n\r\nconst dataRequest = [\r\n  {\r\n    delivery_id: '12345',\r\n    date: 'Jan 16 2020',\r\n    from: '1305',\r\n    to: '1402',\r\n    receiver: 'asd@gmail.com',\r\n    status: 'Pending',\r\n  },\r\n  {\r\n    delivery_id: '12345',\r\n    date: 'Jan 16 2020',\r\n    from: '1305',\r\n    to: '1402',\r\n    receiver: 'asd@gmail.com',\r\n    status: 'Pending',\r\n  },\r\n  {\r\n    delivery_id: '12345',\r\n    date: 'Jan 16 2020',\r\n    from: '1305',\r\n    to: '1402',\r\n    receiver: 'asd@gmail.com',\r\n    status: 'Pending',\r\n  },\r\n];\r\n\r\nconst dataHistory = [\r\n  {\r\n    delivery_id: '12345',\r\n    date: 'Jan 16 2020',\r\n    from: '1305',\r\n    totalItems: '3',\r\n  },\r\n  {\r\n    delivery_id: '12345',\r\n    date: 'Jan 16 2020',\r\n    from: '1305',\r\n    totalItems: '3',\r\n  },\r\n  {\r\n    delivery_id: '12345',\r\n    date: 'Jan 16 2020',\r\n    from: '1305',\r\n    totalItems: '3',\r\n  },\r\n];\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  card: {\r\n    width: '33%',\r\n    marginRight: '8px',\r\n  },\r\n}));\r\n\r\nexport default function HomePage({}: Props): ReactElement {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\r\n      <Box\r\n        p={2}\r\n        py={4}\r\n        width=\"80%\"\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        alignItems=\"center\">\r\n        <Box py={2} display=\"flex\" justifyContent=\"space-between\" width=\"100%\">\r\n          <Typography variant=\"h5\">Recent Request</Typography>\r\n          <Button onClick={() => history.push('/view-request')} color=\"primary\">\r\n            View More\r\n          </Button>\r\n        </Box>\r\n        <Box width=\"100%\" display=\"flex\">\r\n          {dataRequest.map((el, index) => (\r\n            <Card key={index} className={classes.card}>\r\n              <CardContent>\r\n                <Box width=\"100%\" display=\"flex\" justifyContent=\"space-between\">\r\n                  <Typography>Delivery ID : {el.delivery_id}</Typography>\r\n                  <Typography>Date : {el.date}</Typography>\r\n                </Box>\r\n                <Box\r\n                  width=\"100%\"\r\n                  display=\"flex\"\r\n                  justifyContent=\"space-between\"\r\n                  alignItems=\"center\">\r\n                  <Box\r\n                    py={2}\r\n                    display=\"flex\"\r\n                    flexDirection=\"column\"\r\n                    alignItems=\"flex-start\">\r\n                    <Typography>From : {el.from}</Typography>\r\n                    <Typography>To : {el.to}</Typography>\r\n                    <Typography>Receiver : {el.receiver}</Typography>\r\n                  </Box>\r\n                  <Typography>Status : {el.status}</Typography>\r\n                </Box>\r\n              </CardContent>\r\n            </Card>\r\n          ))}\r\n        </Box>\r\n      </Box>\r\n      <Box\r\n        py={4}\r\n        p={2}\r\n        width=\"80%\"\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        alignItems=\"center\">\r\n        <Box py={2} display=\"flex\" justifyContent=\"space-between\" width=\"100%\">\r\n          <Typography variant=\"h5\">Recent History</Typography>\r\n          <Button\r\n            onClick={() => history.push('/view-delivery-history')}\r\n            color=\"primary\">\r\n            View More\r\n          </Button>\r\n        </Box>\r\n        <Box width=\"100%\" display=\"flex\">\r\n          {dataHistory.map((el, index) => (\r\n            <Card key={index} className={classes.card}>\r\n              <CardContent>\r\n                <Box width=\"100%\" display=\"flex\" justifyContent=\"space-between\">\r\n                  <Typography>Delivery ID : {el.delivery_id}</Typography>\r\n                  <Typography>Date : {el.date}</Typography>\r\n                </Box>\r\n                <Box width=\"100%\" display=\"flex\" justifyContent=\"space-between\">\r\n                  <Typography>From : {el.from}</Typography>\r\n                  <Typography>Total Items : {el.totalItems}</Typography>\r\n                </Box>\r\n              </CardContent>\r\n            </Card>\r\n          ))}\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\LoginPage\\LoginPage.tsx",["206","207","208","209","210","211","212"],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\routes\\MainRoute.tsx",["213"],"import { Box } from '@material-ui/core';\r\nimport React, { ReactElement } from 'react';\r\nimport { Route, Switch } from 'react-router';\r\nimport Navbar from '../components/Navbar/Navbar';\r\nimport HomePage from '../pages/HomePage/HomePage';\r\nimport LoginPage from '../pages/LoginPage/LoginPage';\r\nimport PageNotFound from '../pages/PageNotFound/PageNotFound';\r\nimport RequestDeliveryPage from '../pages/RequestDeliveryPage/RequestDeliveryPage';\r\nimport SetWorkingHourPage from '../pages/SetWorkingHourPage/SetWorkingHourPage';\r\nimport ViewDeliveryHistoryPage from '../pages/ViewDeliveryHistoryPage/ViewDeliveryHistoryPage';\r\nimport ViewDeliveryStatusPage from '../pages/ViewDeliveryStatusPage/ViewDeliveryStatusPage';\r\nimport ViewRequestPage from '../pages/ViewRequestPage/ViewRequestPage';\r\nimport ViewWorkingHourPage from '../pages/ViewWorkingHourPage/ViewWorkingHourPage';\r\n\r\ninterface Props {}\r\n\r\nexport default function MainRoute({}: Props): ReactElement {\r\n  return (\r\n    <Box>\r\n      <Navbar />\r\n      <Switch>\r\n        <Route exact path=\"/\" component={HomePage} />\r\n        <Route exact path=\"/home\" component={HomePage} />\r\n        <Route exact path=\"/login\" component={LoginPage} />\r\n        <Route exact path=\"/request-delivery\" component={RequestDeliveryPage} />\r\n        <Route\r\n          exact\r\n          path=\"/view-delivery-history\"\r\n          component={ViewDeliveryHistoryPage}\r\n        />\r\n        <Route exact path=\"/view-request\" component={ViewRequestPage} />\r\n        <Route exact path=\"/set-working-hour\" component={SetWorkingHourPage} />\r\n        <Route\r\n          exact\r\n          path=\"/view-working-hour\"\r\n          component={ViewWorkingHourPage}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/view-delivery-status\"\r\n          component={ViewDeliveryStatusPage}\r\n        />\r\n        <Route path=\"*\" component={PageNotFound} />\r\n      </Switch>\r\n    </Box>\r\n  );\r\n}\r\n","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\states\\UserState.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\queries\\auth\\useAuthenticate.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\auth\\authenticate.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\fetch.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\mutations\\mutationWrapper.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\auth\\login.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\components\\Loading\\Loading.tsx",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\components\\ErrorBox\\ErrorBox.tsx",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\mutations\\auth\\useLogin.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\mutations\\delivery\\useCreateDelivery.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\delivery\\createDelivery.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\utils\\cookies.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\utils\\getErrorResponse.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\queries\\delivery\\useFetchDeliveryHistory.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\queries\\queryWrapper.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\utils\\formatDateAndTime.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\delivery\\fetchDeliveryHistory.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\queries\\delivery\\useFetchRequest.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\delivery\\fetchRequest.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\mutations\\delivery\\useCancelDelivery.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\delivery\\cancelDelivery.ts",["214"],"import { PostDelivery } from '../../models/Delivery';\r\nimport getFetchInstance from '../fetch';\r\n\r\nexport default async function cancelDelivery(id: string) {\r\n  const res = await getFetchInstance().post('/cancel-delivery', { id: id });\r\n  console.log(res);\r\n}\r\n","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\queries\\workhour\\useFetchWorkHour.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\workhour\\fetchWorkHour.ts",[],{"ruleId":"215","replacedBy":"216"},{"ruleId":"217","replacedBy":"218"},{"ruleId":"219","severity":1,"message":"220","line":2,"column":8,"nodeType":"221","messageId":"222","endLine":2,"endColumn":12},{"ruleId":"219","severity":1,"message":"223","line":7,"column":34,"nodeType":"221","messageId":"222","endLine":7,"endColumn":43},{"ruleId":"219","severity":1,"message":"224","line":18,"column":9,"nodeType":"221","messageId":"222","endLine":18,"endColumn":16},{"ruleId":"219","severity":1,"message":"225","line":9,"column":3,"nodeType":"221","messageId":"222","endLine":9,"endColumn":7},{"ruleId":"219","severity":1,"message":"226","line":15,"column":8,"nodeType":"221","messageId":"222","endLine":15,"endColumn":31},{"ruleId":"219","severity":1,"message":"227","line":20,"column":26,"nodeType":"221","messageId":"222","endLine":20,"endColumn":43},{"ruleId":"228","severity":1,"message":"229","line":91,"column":32,"nodeType":"230","messageId":"231","endLine":91,"endColumn":41},{"ruleId":"228","severity":1,"message":"229","line":5,"column":30,"nodeType":"230","messageId":"231","endLine":5,"endColumn":39},{"ruleId":"228","severity":1,"message":"229","line":6,"column":38,"nodeType":"230","messageId":"231","endLine":6,"endColumn":47},{"ruleId":"219","severity":1,"message":"232","line":13,"column":31,"nodeType":"221","messageId":"222","endLine":13,"endColumn":40},{"ruleId":"219","severity":1,"message":"233","line":14,"column":8,"nodeType":"221","messageId":"222","endLine":14,"endColumn":29},{"ruleId":"228","severity":1,"message":"229","line":73,"column":48,"nodeType":"230","messageId":"231","endLine":73,"endColumn":57},{"ruleId":"219","severity":1,"message":"234","line":76,"column":10,"nodeType":"221","messageId":"222","endLine":76,"endColumn":20},{"ruleId":"219","severity":1,"message":"235","line":76,"column":22,"nodeType":"221","messageId":"222","endLine":76,"endColumn":35},{"ruleId":"228","severity":1,"message":"229","line":45,"column":44,"nodeType":"230","messageId":"231","endLine":45,"endColumn":53},{"ruleId":"228","severity":1,"message":"229","line":38,"column":45,"nodeType":"230","messageId":"231","endLine":38,"endColumn":54},{"ruleId":"219","severity":1,"message":"236","line":44,"column":38,"nodeType":"221","messageId":"222","endLine":44,"endColumn":51},{"ruleId":"219","severity":1,"message":"237","line":6,"column":3,"nodeType":"221","messageId":"222","endLine":6,"endColumn":7},{"ruleId":"219","severity":1,"message":"238","line":7,"column":3,"nodeType":"221","messageId":"222","endLine":7,"endColumn":11},{"ruleId":"228","severity":1,"message":"229","line":36,"column":41,"nodeType":"230","messageId":"231","endLine":36,"endColumn":50},{"ruleId":"219","severity":1,"message":"239","line":43,"column":18,"nodeType":"221","messageId":"222","endLine":43,"endColumn":35},{"ruleId":"219","severity":1,"message":"240","line":44,"column":14,"nodeType":"221","messageId":"222","endLine":44,"endColumn":27},{"ruleId":"219","severity":1,"message":"241","line":45,"column":15,"nodeType":"221","messageId":"222","endLine":45,"endColumn":29},{"ruleId":"228","severity":1,"message":"229","line":37,"column":49,"nodeType":"230","messageId":"231","endLine":37,"endColumn":58},{"ruleId":"228","severity":1,"message":"229","line":24,"column":45,"nodeType":"230","messageId":"231","endLine":24,"endColumn":54},{"ruleId":"219","severity":1,"message":"239","line":41,"column":18,"nodeType":"221","messageId":"222","endLine":41,"endColumn":35},{"ruleId":"219","severity":1,"message":"240","line":42,"column":14,"nodeType":"221","messageId":"222","endLine":42,"endColumn":27},{"ruleId":"219","severity":1,"message":"241","line":43,"column":15,"nodeType":"221","messageId":"222","endLine":43,"endColumn":29},{"ruleId":"228","severity":1,"message":"229","line":70,"column":34,"nodeType":"230","messageId":"231","endLine":70,"endColumn":43},{"ruleId":"219","severity":1,"message":"242","line":12,"column":10,"nodeType":"221","messageId":"222","endLine":12,"endColumn":24},{"ruleId":"219","severity":1,"message":"243","line":14,"column":8,"nodeType":"221","messageId":"222","endLine":14,"endColumn":23},{"ruleId":"219","severity":1,"message":"244","line":16,"column":10,"nodeType":"221","messageId":"222","endLine":16,"endColumn":21},{"ruleId":"228","severity":1,"message":"229","line":54,"column":35,"nodeType":"230","messageId":"231","endLine":54,"endColumn":44},{"ruleId":"219","severity":1,"message":"245","line":57,"column":19,"nodeType":"221","messageId":"222","endLine":57,"endColumn":28},{"ruleId":"219","severity":1,"message":"246","line":77,"column":5,"nodeType":"221","messageId":"222","endLine":77,"endColumn":11},{"ruleId":"219","severity":1,"message":"247","line":78,"column":5,"nodeType":"221","messageId":"222","endLine":78,"endColumn":12},{"ruleId":"228","severity":1,"message":"229","line":17,"column":35,"nodeType":"230","messageId":"231","endLine":17,"endColumn":44},{"ruleId":"219","severity":1,"message":"248","line":1,"column":10,"nodeType":"221","messageId":"222","endLine":1,"endColumn":22},"no-native-reassign",["249"],"no-negated-in-lhs",["250"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'setCookie' is defined but never used.","'history' is assigned a value but never used.","'Menu' is defined but never used.","'NotificationsActiveIcon' is defined but never used.","'useSetRecoilState' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'useEffect' is defined but never used.","'FiberManualRecordIcon' is defined but never used.","'listStatus' is assigned a value but never used.","'setListStatus' is assigned a value but never used.","'errorWorkHour' is assigned a value but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'isDeliveryLoading' is assigned a value but never used.","'deliveryError' is assigned a value but never used.","'deliveryStatus' is assigned a value but never used.","'useRecoilState' is defined but never used.","'useAuthenticate' is defined but never used.","'eraseCookie' is defined but never used.","'isLoading' is assigned a value but never used.","'errors' is assigned a value but never used.","'touched' is assigned a value but never used.","'PostDelivery' is defined but never used.","no-global-assign","no-unsafe-negation"]