[{"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\index.tsx":"1","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\reportWebVitals.ts":"2","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\App.tsx":"3","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\components\\Navbar\\Navbar.tsx":"4","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\Test.tsx":"5","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\PageNotFound\\PageNotFound.tsx":"6","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\components\\SelectInput\\SelectInput.tsx":"7","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\ViewDeliveryStatusPage\\ViewDeliveryStatusPage.tsx":"8","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\SetWorkingHourPage\\SetWorkingHourPage.tsx":"9","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\components\\CustomModal\\CustomModal.tsx":"10","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\ViewWorkingHourPage\\ViewWorkingHourPage.tsx":"11","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\ViewRequestPage\\ViewRequestPage.tsx":"12","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\ViewDeliveryHistoryPage\\ViewDeliveryHistoryPage.tsx":"13","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\RequestDeliveryPage\\RequestDeliveryPage.tsx":"14","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\HomePage\\HomePage.tsx":"15","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\LoginPage\\LoginPage.tsx":"16","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\routes\\MainRoute.tsx":"17","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\states\\UserState.ts":"18","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\queries\\auth\\useAuthenticate.ts":"19","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\auth\\authenticate.ts":"20","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\fetch.ts":"21","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\mutations\\mutationWrapper.ts":"22","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\auth\\login.ts":"23","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\components\\Loading\\Loading.tsx":"24","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\components\\ErrorBox\\ErrorBox.tsx":"25","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\mutations\\auth\\useLogin.ts":"26","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\mutations\\delivery\\useCreateDelivery.ts":"27","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\delivery\\createDelivery.ts":"28","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\utils\\cookies.ts":"29","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\utils\\getErrorResponse.ts":"30","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\queries\\delivery\\useFetchDeliveryHistory.ts":"31","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\queries\\queryWrapper.ts":"32","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\utils\\formatDateAndTime.ts":"33","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\delivery\\fetchDeliveryHistory.ts":"34","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\queries\\delivery\\useFetchRequest.ts":"35","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\delivery\\fetchRequest.ts":"36","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\mutations\\delivery\\useCancelDelivery.ts":"37","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\delivery\\cancelDelivery.ts":"38","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\queries\\workhour\\useFetchWorkHour.ts":"39","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\workhour\\fetchWorkHour.ts":"40","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\queries\\delivery\\useFetchAdminPending.ts":"41","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\delivery\\fetchAdminPending.ts":"42","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\queries\\delivery\\useFetchAdminDelivered.ts":"43","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\delivery\\fetchAdminDelivered.ts":"44","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\mutations\\delivery\\useUpdateStatusDelivery.ts":"45","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\delivery\\updateStatusDelivery.ts":"46","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\mutations\\workhour\\useCreateWorkHour.ts":"47","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\workhour\\createWorkHour.ts":"48","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\mutations\\workhour\\useDeleteWorkHour.ts":"49","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\workhour\\deleteWorkHour.ts":"50","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\HomePage\\Sections\\UserHome.tsx":"51","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\HomePage\\Sections\\AdminHome.tsx":"52","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\components\\FullScreenLoading\\FullScreenLoading.tsx":"53","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\components\\NotificationModal\\ErrorModal.tsx":"54","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\components\\NotificationModal\\NotificationModal.tsx":"55","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\components\\NotificationModal\\SuccessModal.tsx":"56","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\ViewQueuePage\\ViewQueuePage.tsx":"57","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\queries\\delivery\\useFetchQueue.ts":"58","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\delivery\\fetchQueue.ts":"59"},{"size":671,"mtime":1611212279306,"results":"60","hashOfConfig":"61"},{"size":425,"mtime":499162500000,"results":"62","hashOfConfig":"61"},{"size":2566,"mtime":1611596784430,"results":"63","hashOfConfig":"61"},{"size":5748,"mtime":1611286609648,"results":"64","hashOfConfig":"61"},{"size":159,"mtime":1610685195696,"results":"65","hashOfConfig":"66"},{"size":481,"mtime":1611203267012,"results":"67","hashOfConfig":"61"},{"size":2451,"mtime":1610775481915,"results":"68","hashOfConfig":"61"},{"size":13366,"mtime":1611584389396,"results":"69","hashOfConfig":"61"},{"size":7196,"mtime":1611584974665,"results":"70","hashOfConfig":"61"},{"size":925,"mtime":1610777879271,"results":"71","hashOfConfig":"61"},{"size":1916,"mtime":1611584423632,"results":"72","hashOfConfig":"61"},{"size":5048,"mtime":1611577319375,"results":"73","hashOfConfig":"61"},{"size":3896,"mtime":1611244373918,"results":"74","hashOfConfig":"61"},{"size":7487,"mtime":1611576483246,"results":"75","hashOfConfig":"61"},{"size":1097,"mtime":1611567476965,"results":"76","hashOfConfig":"61"},{"size":4223,"mtime":1611285821699,"results":"77","hashOfConfig":"61"},{"size":1908,"mtime":1611287572119,"results":"78","hashOfConfig":"61"},{"size":187,"mtime":1611210226277,"results":"79","hashOfConfig":"61"},{"size":247,"mtime":1611212898442,"results":"80","hashOfConfig":"61"},{"size":169,"mtime":1611210884724,"results":"81","hashOfConfig":"61"},{"size":492,"mtime":1611223604922,"results":"82","hashOfConfig":"61"},{"size":796,"mtime":1611212744736,"results":"83","hashOfConfig":"61"},{"size":251,"mtime":1611214687367,"results":"84","hashOfConfig":"61"},{"size":1843,"mtime":1611558917115,"results":"85","hashOfConfig":"61"},{"size":801,"mtime":1611219436181,"results":"86","hashOfConfig":"61"},{"size":167,"mtime":1611222358320,"results":"87","hashOfConfig":"61"},{"size":403,"mtime":1611246289648,"results":"88","hashOfConfig":"61"},{"size":263,"mtime":1611222947240,"results":"89","hashOfConfig":"61"},{"size":773,"mtime":1611217271960,"results":"90","hashOfConfig":"61"},{"size":92,"mtime":1611219282798,"results":"91","hashOfConfig":"61"},{"size":302,"mtime":1611246269641,"results":"92","hashOfConfig":"61"},{"size":132,"mtime":1611204069810,"results":"93","hashOfConfig":"61"},{"size":184,"mtime":1611244333755,"results":"94","hashOfConfig":"61"},{"size":286,"mtime":1611249158111,"results":"95","hashOfConfig":"61"},{"size":270,"mtime":1611246271552,"results":"96","hashOfConfig":"61"},{"size":283,"mtime":1611249154274,"results":"97","hashOfConfig":"61"},{"size":403,"mtime":1611246329475,"results":"98","hashOfConfig":"61"},{"size":261,"mtime":1611246542747,"results":"99","hashOfConfig":"61"},{"size":289,"mtime":1611249497372,"results":"100","hashOfConfig":"61"},{"size":271,"mtime":1611249527443,"results":"101","hashOfConfig":"61"},{"size":296,"mtime":1611286905734,"results":"102","hashOfConfig":"61"},{"size":283,"mtime":1611252486043,"results":"103","hashOfConfig":"61"},{"size":321,"mtime":1611286929415,"results":"104","hashOfConfig":"61"},{"size":293,"mtime":1611286675781,"results":"105","hashOfConfig":"61"},{"size":447,"mtime":1611290955155,"results":"106","hashOfConfig":"61"},{"size":301,"mtime":1611290874316,"results":"107","hashOfConfig":"61"},{"size":340,"mtime":1611295079916,"results":"108","hashOfConfig":"61"},{"size":310,"mtime":1611295011393,"results":"109","hashOfConfig":"61"},{"size":340,"mtime":1611295861807,"results":"110","hashOfConfig":"61"},{"size":229,"mtime":1611295974829,"results":"111","hashOfConfig":"61"},{"size":5301,"mtime":1611580071007,"results":"112","hashOfConfig":"61"},{"size":5315,"mtime":1611581188139,"results":"113","hashOfConfig":"61"},{"size":957,"mtime":1611574127189,"results":"114","hashOfConfig":"61"},{"size":836,"mtime":1611223598327,"results":"115","hashOfConfig":"61"},{"size":2650,"mtime":1611576339598,"results":"116","hashOfConfig":"61"},{"size":646,"mtime":1611578592459,"results":"117","hashOfConfig":"61"},{"size":2726,"mtime":1611596759267,"results":"118","hashOfConfig":"61"},{"size":260,"mtime":1611596641515,"results":"119","hashOfConfig":"61"},{"size":280,"mtime":1611596598239,"results":"120","hashOfConfig":"61"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},"uhryhw",{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"123"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"10uouey",{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"123"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"123"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"123"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"123"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"123"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"123"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"123"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"123"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"123"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"123"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"123"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"123"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"123"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\index.tsx",[],["254","255"],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\reportWebVitals.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\App.tsx",["256","257","258"],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\components\\Navbar\\Navbar.tsx",["259","260","261","262"],"import {\r\n  AppBar,\r\n  Box,\r\n  Button,\r\n  IconButton,\r\n  List,\r\n  ListItem,\r\n  makeStyles,\r\n  Menu,\r\n  Theme,\r\n  Toolbar,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport React, { ReactElement, useState } from 'react';\r\nimport NotificationsActiveIcon from '@material-ui/icons/NotificationsActive';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\r\nimport { useHistory } from 'react-router';\r\nimport { eraseCookie } from '../../utils/cookies';\r\nimport { useRecoilState, useSetRecoilState } from 'recoil';\r\nimport userState from '../../states/UserState';\r\ninterface Props {}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    color: theme.palette.common.white,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    cursor: 'pointer',\r\n  },\r\n  none: {\r\n    display: 'none',\r\n  },\r\n  overlay: {\r\n    top: '64px',\r\n    minHeight: 'calc(100vh - 64px)',\r\n    width: '100vw',\r\n    zIndex: 999,\r\n    position: 'fixed',\r\n    left: 0,\r\n    opacity: 1,\r\n    backgroundColor: 'rgba(50, 50, 50, 0.3)',\r\n    transition: 'opacity 350ms ease-in',\r\n  },\r\n  content: {\r\n    color: 'black',\r\n    transform: 'translteX(0)',\r\n    transition: 'transform 250ms ease-out',\r\n    height: 'calc(100vh - 64px)',\r\n    width: '250px',\r\n    backgroundColor: 'white',\r\n    overflow: 'auto',\r\n  },\r\n  hideOverlay: {\r\n    top: '64px',\r\n    minHeight: 'calc(100vh - 64px)',\r\n    width: '100vw',\r\n    zIndex: 999,\r\n    position: 'fixed',\r\n    left: 0,\r\n    backgroundColor: 'rgba(50, 50, 50, 0.3)',\r\n    transition: 'opacity 350ms ease-in',\r\n    opacity: 0,\r\n    pointerEvents: 'none',\r\n  },\r\n  hideSideBar: {\r\n    color: 'black',\r\n    transition: 'transform 250ms ease-out',\r\n    height: 'calc(100vh - 64px)',\r\n    width: '250px',\r\n    backgroundColor: 'white',\r\n    overflow: 'auto',\r\n    transform: 'translateX(-100%)',\r\n  },\r\n  listItem: {\r\n    cursor: 'pointer',\r\n    padding: '16px',\r\n    borderBottom: '1px solid rgba(50, 50, 50, 0.2)',\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n  },\r\n}));\r\n\r\nexport default function Navbar({}: Props): ReactElement {\r\n  const classes = useStyles();\r\n\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const [user, setUser] = useRecoilState(userState);\r\n\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <AppBar position=\"fixed\" className={classes.root}>\r\n      <Toolbar>\r\n        <IconButton\r\n          onClick={() => setIsOpen(!isOpen)}\r\n          edge=\"start\"\r\n          className={classes.menuButton}\r\n          color=\"inherit\"\r\n          aria-label=\"open drawer\">\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <Typography\r\n          onClick={() => history.push('/home')}\r\n          className={classes.title}\r\n          variant=\"h6\"\r\n          noWrap>\r\n          ReCourSy\r\n        </Typography>\r\n        <Typography>Hello, {user?.user.name}</Typography>\r\n        <Button\r\n          onClick={() => {\r\n            setUser(null);\r\n            eraseCookie('tkn');\r\n          }}\r\n          color=\"inherit\">\r\n          Logout\r\n        </Button>\r\n      </Toolbar>\r\n      <Box className={isOpen ? classes.overlay : classes.hideOverlay}>\r\n        <List className={isOpen ? classes.content : classes.hideSideBar}>\r\n          <ListItem\r\n            className={`${\r\n              user && user.user.role === 'user'\r\n                ? classes.none\r\n                : classes.listItem\r\n            }`}\r\n            onClick={() => {\r\n              history.push('/set-working-hour');\r\n              setIsOpen(false);\r\n            }}>\r\n            Set Working Hour <ArrowForwardIosIcon />\r\n          </ListItem>\r\n          <ListItem\r\n            onClick={() => {\r\n              history.push('/view-delivery-status');\r\n              setIsOpen(false);\r\n            }}\r\n            className={`${\r\n              user && user.user.role === 'user'\r\n                ? classes.none\r\n                : classes.listItem\r\n            }`}>\r\n            View Delivery Status <ArrowForwardIosIcon />\r\n          </ListItem>\r\n          <ListItem\r\n            className={\r\n              user && user.user.role === 'admin'\r\n                ? classes.none\r\n                : classes.listItem\r\n            }\r\n            onClick={() => {\r\n              history.push('/view-working-hour');\r\n              setIsOpen(false);\r\n            }}>\r\n            View Working Hour <ArrowForwardIosIcon />\r\n          </ListItem>\r\n          <ListItem\r\n            className={\r\n              user && user.user.role === 'admin'\r\n                ? classes.none\r\n                : classes.listItem\r\n            }\r\n            onClick={() => {\r\n              history.push('/view-request');\r\n              setIsOpen(false);\r\n            }}>\r\n            View Request <ArrowForwardIosIcon />\r\n          </ListItem>\r\n          <ListItem\r\n            className={\r\n              user && user.user.role === 'admin'\r\n                ? classes.none\r\n                : classes.listItem\r\n            }\r\n            onClick={() => {\r\n              history.push('/view-delivery-history');\r\n              setIsOpen(false);\r\n            }}>\r\n            View Delivery History <ArrowForwardIosIcon />\r\n          </ListItem>\r\n          <ListItem\r\n            className={\r\n              user && user.user.role === 'admin'\r\n                ? classes.none\r\n                : classes.listItem\r\n            }\r\n            onClick={() => {\r\n              history.push('/request-delivery');\r\n              setIsOpen(false);\r\n            }}>\r\n            Request Delivery <ArrowForwardIosIcon />\r\n          </ListItem>\r\n        </List>\r\n      </Box>\r\n    </AppBar>\r\n  );\r\n}\r\n","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\Test.tsx",["263"],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\PageNotFound\\PageNotFound.tsx",["264"],"import { Box, Typography } from '@material-ui/core';\r\nimport React, { ReactElement } from 'react';\r\n\r\ninterface Props {}\r\n\r\nexport default function PageNotFound({}: Props): ReactElement {\r\n  return (\r\n    <Box\r\n      display=\"flex\"\r\n      width=\"100%\"\r\n      height=\"100vh\"\r\n      flexDirection=\"column\"\r\n      alignItems=\"center\"\r\n      justifyContent=\"center\">\r\n      <Typography variant=\"h3\" color=\"error\">\r\n        404 Page Not Found\r\n      </Typography>\r\n    </Box>\r\n  );\r\n}\r\n","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\components\\SelectInput\\SelectInput.tsx",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\ViewDeliveryStatusPage\\ViewDeliveryStatusPage.tsx",["265","266","267"],"import {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  List,\r\n  ListItem,\r\n  makeStyles,\r\n  TextField,\r\n  Theme,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport React, { ReactElement, useEffect, useState } from 'react';\r\nimport SelectInput from '../../components/SelectInput/SelectInput';\r\nimport useFetchAdminPending from '../../effects/queries/delivery/useFetchAdminPending';\r\nimport useFetchAdminDelivered from '../../effects/queries/delivery/useFetchAdminDelivered';\r\nimport formatDateAndTime from '../../utils/formatDateAndTime';\r\nimport { DeliveryHistory } from '../../models/Delivery';\r\nimport useUpdateStatusDelivery from '../../effects/mutations/delivery/useUpdateStatusDelivery';\r\nimport FullScreenLoading from '../../components/FullScreenLoading/FullScreenLoading';\r\nimport ErrorModal from '../../components/NotificationModal/ErrorModal';\r\nimport SuccessModal from '../../components/NotificationModal/SuccessModal';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  list: {\r\n    width: '100%',\r\n  },\r\n  listItem: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'flex-start',\r\n    width: '100%',\r\n    borderBottom: '1px solid rgba(50, 50, 50, 0.2)',\r\n  },\r\n  card: {\r\n    marginBottom: '24px',\r\n  },\r\n  none: {\r\n    display: 'none',\r\n  },\r\n}));\r\n\r\ninterface Props {}\r\n\r\nexport default function ViewDeliveryStatusPage({}: Props): ReactElement {\r\n  const classes = useStyles();\r\n\r\n  const { data: dataAdminPending } = useFetchAdminPending();\r\n  const { data: dataAdminDelivered } = useFetchAdminDelivered();\r\n\r\n  const [adminPendingState, setAdminPendingState] = useState<DeliveryHistory[]>(\r\n    []\r\n  );\r\n  const [adminDeliveredState, setAdminDeliveredState] = useState<\r\n    DeliveryHistory[]\r\n  >([]);\r\n\r\n  const [openError, setOpenError] = useState(false);\r\n  const [openSuccess, setOpenSuccess] = useState(false);\r\n\r\n  const [\r\n    updateStatusDelivery,\r\n    {\r\n      isLoading: isDeliveryLoading,\r\n      error: deliveryError,\r\n      status: deliveryStatus,\r\n    },\r\n  ] = useUpdateStatusDelivery();\r\n\r\n  useEffect(() => {\r\n    if (!dataAdminPending) return;\r\n    const newData: DeliveryHistory[] = [];\r\n    dataAdminPending.map((el, index) => {\r\n      newData.push(el);\r\n    });\r\n    setAdminPendingState(newData);\r\n  }, [dataAdminPending]);\r\n\r\n  useEffect(() => {\r\n    if (!dataAdminDelivered) return;\r\n    const newData: DeliveryHistory[] = [];\r\n    dataAdminDelivered.map((el, index) => {\r\n      newData.push(el);\r\n    });\r\n    setAdminDeliveredState(newData);\r\n  }, [dataAdminDelivered]);\r\n\r\n  useEffect(() => {\r\n    if (deliveryError) {\r\n      setOpenError(true);\r\n    } else if (deliveryStatus === 'success') {\r\n      setOpenSuccess(true);\r\n    }\r\n  }, [deliveryError, deliveryStatus]);\r\n\r\n  return (\r\n    <Box width=\"100%\" display=\"flex\" justifyContent=\"center\">\r\n      <FullScreenLoading open={isDeliveryLoading} />\r\n      <ErrorModal\r\n        error={deliveryError}\r\n        onButtonClickOrClose={() => setOpenError(false)}\r\n        open={openError}\r\n      />\r\n      <SuccessModal\r\n        desc=\"Update Success\"\r\n        open={openSuccess}\r\n        onButtonClickOrClose={() => {\r\n          setOpenSuccess(false);\r\n        }}\r\n      />\r\n      <Box width=\"100%\" p={2}>\r\n        <Box display=\"flex\" justifyContent=\"flex-start\" my={2}>\r\n          <Box width=\"50%\">\r\n            <Typography variant=\"h4\">View Pending Request</Typography>\r\n          </Box>\r\n          <Box width=\"50%\">\r\n            <Typography variant=\"h4\">View Delivered Request</Typography>\r\n          </Box>\r\n        </Box>\r\n        <Box width=\"100%\" display=\"flex\">\r\n          <Box width=\"50%\" p={2}>\r\n            {adminPendingState &&\r\n              Object.values(adminPendingState).map((el, index) => (\r\n                <Card\r\n                  className={\r\n                    el.details.length < 1 ? classes.none : classes.card\r\n                  }\r\n                  key={index}>\r\n                  <CardContent>\r\n                    <Box display=\"flex\" justifyContent=\"space-between\">\r\n                      <Typography>Delivery Id : {el.id}</Typography>\r\n                      <Typography>\r\n                        Date : {formatDateAndTime(el.create_at)}\r\n                      </Typography>\r\n                    </Box>\r\n                    <Box\r\n                      py={2}\r\n                      display=\"flex\"\r\n                      flexDirection=\"column\"\r\n                      alignItems=\"flex-start\">\r\n                      <Typography>From : {el.from}</Typography>\r\n                    </Box>\r\n                    <Box borderBottom=\"1px solid\" />\r\n                    <List className={classes.list}>\r\n                      {el.details.map((el1, idx) => (\r\n                        <ListItem className={classes.listItem} key={idx}>\r\n                          <Box display=\"flex\" width=\"100%\">\r\n                            <Typography>Item Name : {el1.itemName}</Typography>\r\n                          </Box>\r\n                          <Box\r\n                            width=\"100%\"\r\n                            py={2}\r\n                            display=\"flex\"\r\n                            justifyContent=\"space-between\">\r\n                            <Box\r\n                              display=\"flex\"\r\n                              flexDirection=\"column\"\r\n                              alignItems=\"flex-start\">\r\n                              <Typography>\r\n                                To : {el1.room_destination}\r\n                              </Typography>\r\n                              <Typography>Receiver : {el1.to}</Typography>\r\n                            </Box>\r\n                            <Box\r\n                              display=\"flex\"\r\n                              flexDirection=\"column\"\r\n                              justifyContent=\"flex-end\"\r\n                              width=\"163.2px\"\r\n                              pt={1}>\r\n                              <SelectInput\r\n                                label=\"Status\"\r\n                                value={el1.status}\r\n                                onChange={(e) => {\r\n                                  const value = e.target.value;\r\n                                  setAdminPendingState((prev) => {\r\n                                    const newState = [...prev];\r\n                                    newState[index].details[idx].status = value;\r\n                                    return newState;\r\n                                  });\r\n                                }}\r\n                                options={[\r\n                                  { value: 'completed', text: 'Completed' },\r\n                                  { value: 'delivered', text: 'Delivered' },\r\n                                  { value: 'pending', text: 'Pending' },\r\n                                ]}\r\n                              />\r\n                            </Box>\r\n                          </Box>\r\n                          <Box py={2} width=\"100%\">\r\n                            <TextField\r\n                              label=\"Note\"\r\n                              fullWidth\r\n                              multiline\r\n                              variant=\"outlined\"\r\n                              color=\"primary\"\r\n                              size=\"small\"\r\n                              value={el1.itemNote}\r\n                              disabled\r\n                              InputProps={{\r\n                                rows: 2,\r\n                              }}\r\n                            />\r\n                          </Box>\r\n                          <Box\r\n                            width=\"100%\"\r\n                            display=\"flex\"\r\n                            justifyContent=\"flex-end\">\r\n                            <Button\r\n                              onClick={() => {\r\n                                const data = {\r\n                                  id: el1.id,\r\n                                  status: el1.status,\r\n                                };\r\n                                updateStatusDelivery(data);\r\n                              }}\r\n                              variant=\"contained\"\r\n                              color=\"primary\">\r\n                              Update\r\n                            </Button>\r\n                          </Box>\r\n                        </ListItem>\r\n                      ))}\r\n                    </List>\r\n                  </CardContent>\r\n                </Card>\r\n              ))}\r\n          </Box>\r\n          <Box width=\"50%\" p={2}>\r\n            {adminDeliveredState &&\r\n              Object.values(adminDeliveredState).map((el, index) => (\r\n                <Card\r\n                  className={\r\n                    el.details.length < 1 ? classes.none : classes.card\r\n                  }\r\n                  key={index}>\r\n                  <CardContent>\r\n                    <Box display=\"flex\" justifyContent=\"space-between\">\r\n                      <Typography>Delivery Id : {el.id}</Typography>\r\n                      <Typography>\r\n                        Date : {formatDateAndTime(el.create_at)}\r\n                      </Typography>\r\n                    </Box>\r\n                    <Box\r\n                      py={2}\r\n                      display=\"flex\"\r\n                      flexDirection=\"column\"\r\n                      alignItems=\"flex-start\">\r\n                      <Typography>From : {el.from}</Typography>\r\n                    </Box>\r\n                    <Box borderBottom=\"1px solid\" />\r\n                    <List className={classes.list}>\r\n                      {el.details.map((el1, idx) => (\r\n                        <ListItem className={classes.listItem} key={idx}>\r\n                          <Box display=\"flex\" width=\"100%\">\r\n                            <Typography>Item Name : {el1.itemName}</Typography>\r\n                          </Box>\r\n                          <Box\r\n                            width=\"100%\"\r\n                            py={2}\r\n                            display=\"flex\"\r\n                            justifyContent=\"space-between\">\r\n                            <Box\r\n                              display=\"flex\"\r\n                              flexDirection=\"column\"\r\n                              alignItems=\"flex-start\">\r\n                              <Typography>\r\n                                To : {el1.room_destination}\r\n                              </Typography>\r\n                              <Typography>Receiver : {el1.to}</Typography>\r\n                            </Box>\r\n                            <Box\r\n                              display=\"flex\"\r\n                              flexDirection=\"column\"\r\n                              justifyContent=\"flex-end\"\r\n                              width=\"163.2px\"\r\n                              pt={1}>\r\n                              <SelectInput\r\n                                label=\"Status\"\r\n                                value={el1.status}\r\n                                onChange={(e) => {\r\n                                  const value = e.target.value;\r\n                                  setAdminDeliveredState((prev) => {\r\n                                    const newState = [...prev];\r\n                                    newState[index].details[idx].status = value;\r\n                                    return newState;\r\n                                  });\r\n                                }}\r\n                                options={[\r\n                                  { value: 'completed', text: 'Completed' },\r\n                                  { value: 'delivered', text: 'Delivered' },\r\n                                ]}\r\n                              />\r\n                            </Box>\r\n                          </Box>\r\n                          <Box py={2} width=\"100%\">\r\n                            <TextField\r\n                              label=\"Note\"\r\n                              fullWidth\r\n                              multiline\r\n                              variant=\"outlined\"\r\n                              color=\"primary\"\r\n                              size=\"small\"\r\n                              value={el1.itemNote}\r\n                              disabled\r\n                              InputProps={{\r\n                                rows: 2,\r\n                              }}\r\n                            />\r\n                          </Box>\r\n                          <Box\r\n                            width=\"100%\"\r\n                            display=\"flex\"\r\n                            justifyContent=\"flex-end\">\r\n                            <Button\r\n                              onClick={() => {\r\n                                const data = {\r\n                                  id: el1.id,\r\n                                  status: el1.status,\r\n                                };\r\n                                updateStatusDelivery(data);\r\n                              }}\r\n                              variant=\"contained\"\r\n                              color=\"primary\">\r\n                              Update\r\n                            </Button>\r\n                          </Box>\r\n                        </ListItem>\r\n                      ))}\r\n                    </List>\r\n                  </CardContent>\r\n                </Card>\r\n              ))}\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\SetWorkingHourPage\\SetWorkingHourPage.tsx",["268","269"],"import {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  IconButton,\r\n  List,\r\n  ListItem,\r\n  makeStyles,\r\n  TextField,\r\n  Theme,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport React, { ReactElement, useEffect, useState } from 'react';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport CustomModal from '../../components/CustomModal/CustomModal';\r\nimport useFetchWorkHour from '../../effects/queries/workhour/useFetchWorkHour';\r\nimport useCreateWorkHour from '../../effects/mutations/workhour/useCreateWorkHour';\r\nimport useDeleteWorkHour from '../../effects/mutations/workhour/useDeleteWorkHour';\r\nimport FullScreenLoading from '../../components/FullScreenLoading/FullScreenLoading';\r\nimport ErrorModal from '../../components/NotificationModal/ErrorModal';\r\nimport SuccessModal from '../../components/NotificationModal/SuccessModal';\r\n\r\ninterface Props {}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  list: {\r\n    width: '100%',\r\n  },\r\n  listItem: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n    width: '100%',\r\n    borderBottom: '1px solid rgba(50, 50, 50, 0.2)',\r\n  },\r\n}));\r\n\r\nconst data = [\r\n  {\r\n    from: '09.00',\r\n    to: '12.00',\r\n  },\r\n  {\r\n    from: '09.00',\r\n    to: '12.00',\r\n  },\r\n];\r\n\r\nexport default function SetWorkingHourPage({}: Props): ReactElement {\r\n  const classes = useStyles();\r\n\r\n  const { data: dataWorkHour } = useFetchWorkHour('');\r\n  const [isOpenModal, setIsOpenModal] = useState(false);\r\n  const [openSuccess, setOpenSuccess] = useState(false);\r\n  const [openError, setOpenError] = useState(false);\r\n  const [successMessage, setSuccessMessage] = useState('');\r\n\r\n  const [wordHourState, setWordHourState] = useState<{\r\n    from: string;\r\n    to: string;\r\n    note: string;\r\n  }>({\r\n    from: '',\r\n    to: '',\r\n    note: '',\r\n  });\r\n\r\n  const [\r\n    createWorkHour,\r\n    {\r\n      isLoading: isWorkHourLoading,\r\n      error: workHourError,\r\n      status: workHourStatus,\r\n    },\r\n  ] = useCreateWorkHour();\r\n\r\n  const [\r\n    deleteWorkHour,\r\n    { isLoading: isDeleterLoading, error: deleteError, status: deleteStatus },\r\n  ] = useDeleteWorkHour();\r\n\r\n  useEffect(() => {\r\n    if (workHourError) {\r\n      setOpenError(true);\r\n    } else if (workHourStatus === 'success') {\r\n      setSuccessMessage('Add Success');\r\n      setOpenSuccess(true);\r\n    }\r\n  }, [workHourError, workHourStatus]);\r\n\r\n  useEffect(() => {\r\n    if (deleteError) {\r\n      setOpenError(true);\r\n    } else if (deleteStatus === 'success') {\r\n      setSuccessMessage('Delete Success');\r\n      setOpenSuccess(true);\r\n    }\r\n  }, [deleteError, deleteStatus]);\r\n\r\n  return (\r\n    <>\r\n      <FullScreenLoading open={isDeleterLoading || isWorkHourLoading} />\r\n      <ErrorModal\r\n        error={deleteError || workHourError}\r\n        onButtonClickOrClose={() => setOpenError(false)}\r\n        open={openError}\r\n      />\r\n      <SuccessModal\r\n        desc={successMessage}\r\n        open={openSuccess}\r\n        onButtonClickOrClose={() => {\r\n          setOpenSuccess(false);\r\n        }}\r\n      />\r\n      <CustomModal\r\n        handleClose={() => setIsOpenModal(false)}\r\n        open={isOpenModal}\r\n        width={600}>\r\n        <Box width=\"100%\">\r\n          <Typography variant=\"h6\">Add Working Hour</Typography>\r\n          <Box\r\n            py={2}\r\n            display=\"flex\"\r\n            alignItems=\"center\"\r\n            width=\"50%\"\r\n            justifyContent=\"space-between\">\r\n            <Typography>From :</Typography>\r\n            <TextField\r\n              type=\"time\"\r\n              value={wordHourState.from}\r\n              onChange={(e) => {\r\n                const value = e.target.value;\r\n                setWordHourState((prev) => ({\r\n                  ...prev,\r\n                  from: value,\r\n                }));\r\n              }}\r\n            />\r\n          </Box>\r\n          <Box\r\n            py={2}\r\n            display=\"flex\"\r\n            alignItems=\"center\"\r\n            width=\"50%\"\r\n            justifyContent=\"space-between\">\r\n            <Typography>To :</Typography>\r\n            <TextField\r\n              value={wordHourState.to}\r\n              type=\"time\"\r\n              onChange={(e) => {\r\n                const value = e.target.value;\r\n                setWordHourState((prev) => ({\r\n                  ...prev,\r\n                  to: value,\r\n                }));\r\n              }}\r\n            />\r\n          </Box>\r\n          <Box py={2}>\r\n            <Typography>Note :</Typography>\r\n            <TextField\r\n              label=\"Note\"\r\n              fullWidth\r\n              multiline\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n              size=\"small\"\r\n              value={wordHourState.note}\r\n              onChange={(e) => {\r\n                const value = e.target.value;\r\n                setWordHourState((prev) => ({\r\n                  ...prev,\r\n                  note: value,\r\n                }));\r\n              }}\r\n              InputProps={{\r\n                rows: 2,\r\n              }}\r\n            />\r\n          </Box>\r\n          <Box width=\"100%\" display=\"flex\" justifyContent=\"flex-end\">\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => {\r\n                createWorkHour(wordHourState);\r\n                setIsOpenModal(false);\r\n              }}>\r\n              Add\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      </CustomModal>\r\n      <Box width=\"100%\" display=\"flex\" justifyContent=\"center\">\r\n        <Box width=\"80%\" p={2}>\r\n          <Box display=\"flex\" justifyContent=\"flex-start\" my={2}>\r\n            <Typography variant=\"h4\">Working Hour</Typography>\r\n          </Box>\r\n          <Box width=\"100%\" display=\"flex\" justifyContent=\"flex-end\" my={2}>\r\n            <Button\r\n              onClick={() => setIsOpenModal(true)}\r\n              variant=\"contained\"\r\n              color=\"primary\">\r\n              + Add Working Hour\r\n            </Button>\r\n          </Box>\r\n          <Card>\r\n            <CardContent>\r\n              <List>\r\n                {dataWorkHour &&\r\n                  dataWorkHour.map((el, index) => (\r\n                    <ListItem key={index} className={classes.listItem}>\r\n                      <Box width=\"100%\" display=\"flex\">\r\n                        <Box width=\"50%\">\r\n                          <Typography>From : {el.from}</Typography>\r\n                          <Typography>To : {el.to}</Typography>\r\n                        </Box>\r\n                        <Box>\r\n                          <Typography>Note :</Typography>\r\n                          <Typography>{el.note}</Typography>\r\n                        </Box>\r\n                      </Box>\r\n                      <IconButton\r\n                        size=\"small\"\r\n                        onClick={() => {\r\n                          deleteWorkHour({ id: el.id });\r\n                        }}>\r\n                        <DeleteIcon fontSize=\"small\" color=\"error\" />\r\n                      </IconButton>\r\n                    </ListItem>\r\n                  ))}\r\n              </List>\r\n            </CardContent>\r\n          </Card>\r\n        </Box>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\components\\CustomModal\\CustomModal.tsx",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\ViewWorkingHourPage\\ViewWorkingHourPage.tsx",["270","271"],"import {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  List,\r\n  ListItem,\r\n  makeStyles,\r\n  Theme,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport React, { ReactElement, useState } from 'react';\r\nimport useFetchWorkHour from '../../effects/queries/workhour/useFetchWorkHour';\r\n\r\ninterface Props {}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  list: {\r\n    width: '100%',\r\n  },\r\n  listItem: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    width: '100%',\r\n    borderBottom: '1px solid rgba(50, 50, 50, 0.2)',\r\n  },\r\n  card: {\r\n    marginBottom: '24px',\r\n  },\r\n  searchIcon: {\r\n    color: theme.palette.primary.main,\r\n  },\r\n}));\r\n\r\nexport default function ViewWorkingHourPage({}: Props): ReactElement {\r\n  const classes = useStyles();\r\n\r\n  const [search, setSearch] = useState('');\r\n  // const [thisSearch, setThisSearch] = useState('');\r\n\r\n  const { data: dataWorkHour } = useFetchWorkHour(search);\r\n\r\n  return (\r\n    <Box width=\"100%\" display=\"flex\" justifyContent=\"center\">\r\n      <Box width=\"80%\" p={2}>\r\n        <Box display=\"flex\" justifyContent=\"flex-start\" my={2}>\r\n          <Typography variant=\"h4\">Working Hour</Typography>\r\n        </Box>\r\n        <Card>\r\n          <CardContent>\r\n            <List>\r\n              {dataWorkHour &&\r\n                dataWorkHour.map((el, index) => (\r\n                  <ListItem key={index} className={classes.listItem}>\r\n                    <Box width=\"50%\">\r\n                      <Typography>From : {el.from}</Typography>\r\n                      <Typography>To : {el.to}</Typography>\r\n                    </Box>\r\n                    <Box>\r\n                      <Typography>Note: </Typography>\r\n                      <Typography>{el.note}</Typography>\r\n                    </Box>\r\n                  </ListItem>\r\n                ))}\r\n            </List>\r\n          </CardContent>\r\n        </Card>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\ViewRequestPage\\ViewRequestPage.tsx",["272","273","274"],"import {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  List,\r\n  ListItem,\r\n  makeStyles,\r\n  TextField,\r\n  Theme,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport React, { ReactElement, useEffect, useState } from 'react';\r\nimport FullScreenLoading from '../../components/FullScreenLoading/FullScreenLoading';\r\nimport ErrorModal from '../../components/NotificationModal/ErrorModal';\r\nimport SuccessModal from '../../components/NotificationModal/SuccessModal';\r\nimport useCancelDelivery from '../../effects/mutations/delivery/useCancelDelivery';\r\nimport useFetchRequest from '../../effects/queries/delivery/useFetchRequest';\r\nimport formatDateAndTime from '../../utils/formatDateAndTime';\r\n\r\ninterface Props {}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  list: {\r\n    width: '100%',\r\n  },\r\n  listItem: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'flex-start',\r\n    width: '100%',\r\n    borderBottom: '1px solid rgba(50, 50, 50, 0.2)',\r\n  },\r\n  card: {\r\n    marginBottom: '24px',\r\n  },\r\n}));\r\n\r\nexport default function ViewRequestPage({}: Props): ReactElement {\r\n  const classes = useStyles();\r\n\r\n  const { data: dataRequest } = useFetchRequest();\r\n\r\n  const [openSuccess, setOpenSuccess] = useState(false);\r\n  const [openError, setOpenError] = useState(false);\r\n\r\n  const [\r\n    cancelDelivery,\r\n    {\r\n      isLoading: isDeliveryLoading,\r\n      error: deliveryError,\r\n      status: deliveryStatus,\r\n    },\r\n  ] = useCancelDelivery();\r\n\r\n  useEffect(() => {\r\n    if (deliveryError) {\r\n      setOpenError(true);\r\n    } else if (deliveryStatus === 'success') {\r\n      setOpenSuccess(true);\r\n    }\r\n  }, [deliveryError, deliveryStatus]);\r\n\r\n  return (\r\n    <Box width=\"100%\" display=\"flex\" justifyContent=\"center\">\r\n      <FullScreenLoading open={isDeliveryLoading} />\r\n      <SuccessModal\r\n        desc=\"Cancel Success\"\r\n        open={openSuccess}\r\n        onButtonClickOrClose={() => {\r\n          setOpenSuccess(false);\r\n        }}\r\n      />\r\n      <ErrorModal\r\n        error={deliveryError}\r\n        onButtonClickOrClose={() => setOpenError(false)}\r\n        open={openError}\r\n      />\r\n      <Box width=\"80%\" p={2}>\r\n        <Box display=\"flex\" justifyContent=\"flex-start\" my={2}>\r\n          <Typography variant=\"h4\">View Request</Typography>\r\n        </Box>\r\n        {dataRequest &&\r\n          dataRequest.map((el, idx) => (\r\n            <Box key={idx}>\r\n              {el.details.map((el1, index) => (\r\n                <Card className={classes.card} key={index}>\r\n                  <CardContent>\r\n                    <Box display=\"flex\" justifyContent=\"space-between\">\r\n                      <Typography>Delivery Id : {el.id}</Typography>\r\n                      <Typography>\r\n                        Date : {formatDateAndTime(el.create_at)}\r\n                      </Typography>\r\n                    </Box>\r\n                    <Box\r\n                      py={2}\r\n                      display=\"flex\"\r\n                      flexDirection=\"row\"\r\n                      justifyContent=\"space-between\">\r\n                      <Typography>From : {el.from}</Typography>\r\n                      <Typography>To : {el1.room_destination}</Typography>\r\n                    </Box>\r\n                    <Box\r\n                      py={2}\r\n                      display=\"flex\"\r\n                      flexDirection=\"row\"\r\n                      justifyContent=\"space-between\">\r\n                      <Typography>Receiver : {el1.to}</Typography>\r\n                      <Typography>Status : {el1.status}</Typography>\r\n                    </Box>\r\n                    <Box\r\n                      display=\"flex\"\r\n                      flexDirection=\"column\"\r\n                      alignItems=\"flex-start\">\r\n                      <Typography>Item Name : {el1.itemName}</Typography>\r\n                      <Box width=\"100%\" py={1}>\r\n                        <TextField\r\n                          label=\"Note\"\r\n                          fullWidth\r\n                          multiline\r\n                          variant=\"outlined\"\r\n                          color=\"primary\"\r\n                          size=\"small\"\r\n                          value={el1.itemNote}\r\n                          disabled\r\n                          InputProps={{\r\n                            rows: 2,\r\n                          }}\r\n                        />\r\n                      </Box>\r\n                    </Box>\r\n                    <Box width=\"100%\" display=\"flex\" justifyContent=\"flex-end\">\r\n                      <Button\r\n                        onClick={() => {\r\n                          cancelDelivery(el1.id);\r\n                        }}\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        disabled={el1.status === 'delivered' ? true : false}>\r\n                        Cancel\r\n                      </Button>\r\n                    </Box>\r\n                  </CardContent>\r\n                </Card>\r\n              ))}\r\n            </Box>\r\n          ))}\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\ViewDeliveryHistoryPage\\ViewDeliveryHistoryPage.tsx",["275"],"import {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  List,\r\n  ListItem,\r\n  makeStyles,\r\n  TextField,\r\n  Theme,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport React, { ReactElement } from 'react';\r\nimport useFetchDeliveryHistory from '../../effects/queries/delivery/useFetchDeliveryHistory';\r\nimport formatDateAndTime from '../../utils/formatDateAndTime';\r\n\r\ninterface Props {}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  list: {\r\n    width: '100%',\r\n  },\r\n  listItem: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'flex-start',\r\n    width: '100%',\r\n    borderBottom: '1px solid rgba(50, 50, 50, 0.2)',\r\n  },\r\n  card: {\r\n    marginBottom: '24px',\r\n  },\r\n  none: {\r\n    display: 'none',\r\n  },\r\n}));\r\n\r\nexport default function ViewDeliveryHistoryPage({}: Props): ReactElement {\r\n  const classes = useStyles();\r\n\r\n  const { data: dataDelivery } = useFetchDeliveryHistory();\r\n\r\n  return (\r\n    <Box width=\"100%\" display=\"flex\" justifyContent=\"center\">\r\n      <Box width=\"80%\" p={2}>\r\n        <Box display=\"flex\" justifyContent=\"flex-start\" my={2}>\r\n          <Typography variant=\"h4\">View Delivery History</Typography>\r\n        </Box>\r\n        {dataDelivery &&\r\n          dataDelivery.map((el, index) => (\r\n            <Card\r\n              className={el.details.length < 1 ? classes.none : classes.card}\r\n              key={index}>\r\n              <CardContent>\r\n                <Box display=\"flex\" justifyContent=\"space-between\">\r\n                  <Typography>Delivery Id : {el.id}</Typography>\r\n                  <Typography>\r\n                    Date : {formatDateAndTime(el.create_at)}\r\n                  </Typography>\r\n                </Box>\r\n                <Box\r\n                  py={2}\r\n                  display=\"flex\"\r\n                  flexDirection=\"column\"\r\n                  alignItems=\"flex-start\">\r\n                  <Typography>From : {el.from}</Typography>\r\n                </Box>\r\n                <Box borderBottom=\"1px solid\" />\r\n                <List className={classes.list}>\r\n                  {el.details.map((el1, index) => (\r\n                    <ListItem className={classes.listItem} key={index}>\r\n                      <Box\r\n                        display=\"flex\"\r\n                        width=\"100%\"\r\n                        justifyContent=\"space-between\">\r\n                        <Typography>Item Name : {el1.itemName}</Typography>\r\n                        <Typography>Status : {el1.status}</Typography>\r\n                      </Box>\r\n                      <Box\r\n                        width=\"100%\"\r\n                        py={2}\r\n                        display=\"flex\"\r\n                        justifyContent=\"space-between\">\r\n                        <Box\r\n                          display=\"flex\"\r\n                          flexDirection=\"column\"\r\n                          alignItems=\"flex-start\">\r\n                          <Typography>To : {el1.to}</Typography>\r\n                          <Typography>Receiver : {el1.to}</Typography>\r\n                        </Box>\r\n                      </Box>\r\n                      <Box py={2} width=\"100%\">\r\n                        <TextField\r\n                          label=\"Note\"\r\n                          fullWidth\r\n                          multiline\r\n                          variant=\"outlined\"\r\n                          color=\"primary\"\r\n                          size=\"small\"\r\n                          value={el1.itemNote}\r\n                          disabled\r\n                          InputProps={{\r\n                            rows: 2,\r\n                          }}\r\n                        />\r\n                      </Box>\r\n                    </ListItem>\r\n                  ))}\r\n                </List>\r\n              </CardContent>\r\n            </Card>\r\n          ))}\r\n        {/* {data.map((el, index) => (\r\n          \r\n        ))} */}\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\RequestDeliveryPage\\RequestDeliveryPage.tsx",["276"],"import {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  IconButton,\r\n  makeStyles,\r\n  TextField,\r\n  Theme,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport React, { ReactElement, useEffect, useState } from 'react';\r\nimport FullScreenLoading from '../../components/FullScreenLoading/FullScreenLoading';\r\nimport ErrorModal from '../../components/NotificationModal/ErrorModal';\r\nimport SuccessModal from '../../components/NotificationModal/SuccessModal';\r\nimport useCreateDelivery from '../../effects/mutations/delivery/useCreateDelivery';\r\nimport { PostDelivery } from '../../models/Delivery';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  addBtn: {\r\n    borderRadius: '20px',\r\n  },\r\n}));\r\n\r\ninterface Props {}\r\nexport default function RequestDeliveryPage({}: Props): ReactElement {\r\n  const classes = useStyles();\r\n\r\n  const [from, setFrom] = useState('');\r\n\r\n  const [detailRequest, setDetailRequest] = useState<\r\n    {\r\n      room_destination: string;\r\n      to: string;\r\n      itemName: string;\r\n      itemNote: string;\r\n    }[]\r\n  >([]);\r\n\r\n  const [openError, setOpenError] = useState(false);\r\n  const [openSuccess, setOpenSuccess] = useState(false);\r\n\r\n  const [\r\n    createDelivery,\r\n    {\r\n      isLoading: isDeliveryLoading,\r\n      error: deliveryError,\r\n      status: deliveryStatus,\r\n    },\r\n  ] = useCreateDelivery();\r\n\r\n  const handleSubmit = () => {\r\n    const data: PostDelivery = {\r\n      from: from,\r\n      details: detailRequest,\r\n    };\r\n    createDelivery(data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (deliveryError) {\r\n      setOpenError(true);\r\n    } else if (deliveryStatus === 'success') {\r\n      setOpenSuccess(true);\r\n    }\r\n  }, [deliveryError, deliveryStatus]);\r\n\r\n  return (\r\n    <>\r\n      <FullScreenLoading open={isDeliveryLoading} />\r\n      <ErrorModal\r\n        error={deliveryError}\r\n        onButtonClickOrClose={() => setOpenError(false)}\r\n        open={openError}\r\n      />\r\n      <SuccessModal\r\n        desc=\"Request Success\"\r\n        open={openSuccess}\r\n        onButtonClickOrClose={() => {\r\n          setOpenSuccess(false);\r\n        }}\r\n      />\r\n      <Box width=\"100%\" display=\"flex\" justifyContent=\"center\">\r\n        <Box width=\"80%\" p={2}>\r\n          <Box display=\"flex\" justifyContent=\"flex-start\" my={2}>\r\n            <Typography variant=\"h4\">Request Delivery</Typography>\r\n          </Box>\r\n          <Card>\r\n            <CardContent>\r\n              <Box\r\n                display=\"flex\"\r\n                flexDirection=\"column\"\r\n                alignItems=\"flex-start\">\r\n                <TextField\r\n                  type=\"text\"\r\n                  label=\"From\"\r\n                  value={from}\r\n                  onChange={(el) => {\r\n                    const value = el.target.value;\r\n                    setFrom(value);\r\n                  }}\r\n                />\r\n                <Box\r\n                  py={2}\r\n                  width=\"100%\"\r\n                  display=\"flex\"\r\n                  justifyContent=\"flex-end\">\r\n                  <Button\r\n                    className={classes.addBtn}\r\n                    variant=\"outlined\"\r\n                    onClick={() => {\r\n                      const newArr = {\r\n                        room_destination: '',\r\n                        to: '',\r\n                        itemName: '',\r\n                        itemNote: '',\r\n                      };\r\n                      setDetailRequest((oldArray) => [...oldArray, newArr]);\r\n                    }}>\r\n                    Add Item\r\n                  </Button>\r\n                </Box>\r\n                {detailRequest.map((el, index) => (\r\n                  <Box key={index} width=\"100%\" borderBottom=\"1px solid\" py={2}>\r\n                    <Box width=\"100%\" display=\"flex\" justifyContent=\"flex-end\">\r\n                      <IconButton\r\n                        size=\"small\"\r\n                        onClick={() => {\r\n                          const newArr = detailRequest.filter(\r\n                            (el, idx) => idx !== index\r\n                          );\r\n                          setDetailRequest(newArr);\r\n                        }}>\r\n                        <DeleteIcon fontSize=\"small\" color=\"error\" />\r\n                      </IconButton>\r\n                    </Box>\r\n                    <Box\r\n                      py={2}\r\n                      width=\"100%\"\r\n                      display=\"flex\"\r\n                      justifyContent=\"space-between\">\r\n                      <TextField\r\n                        onChange={(e) => {\r\n                          const value = e.target.value;\r\n                          let newArr = [...detailRequest];\r\n                          newArr[index].room_destination = value;\r\n                          setDetailRequest(newArr);\r\n                        }}\r\n                        value={el.room_destination}\r\n                        variant=\"outlined\"\r\n                        type=\"text\"\r\n                        label=\"To\"\r\n                      />\r\n                      <TextField\r\n                        onChange={(e) => {\r\n                          const value = e.target.value;\r\n                          let newArr = [...detailRequest];\r\n                          newArr[index].to = value;\r\n                          setDetailRequest(newArr);\r\n                        }}\r\n                        value={el.to}\r\n                        type=\"text\"\r\n                        variant=\"outlined\"\r\n                        label=\"Receiver\"\r\n                      />\r\n                    </Box>\r\n                    <Box\r\n                      width=\"100%\"\r\n                      display=\"flex\"\r\n                      flexDirection=\"column\"\r\n                      alignItems=\"flex-start\">\r\n                      <Box py={2}>\r\n                        <TextField\r\n                          onChange={(e) => {\r\n                            const value = e.target.value;\r\n                            let newArr = [...detailRequest];\r\n                            newArr[index].itemName = value;\r\n                            setDetailRequest(newArr);\r\n                          }}\r\n                          value={el.itemName}\r\n                          type=\"text\"\r\n                          variant=\"outlined\"\r\n                          label=\"Item\"\r\n                        />\r\n                      </Box>\r\n                      <TextField\r\n                        fullWidth\r\n                        onChange={(e) => {\r\n                          const value = e.target.value;\r\n                          let newArr = [...detailRequest];\r\n                          newArr[index].itemNote = value;\r\n                          setDetailRequest(newArr);\r\n                        }}\r\n                        multiline\r\n                        variant=\"outlined\"\r\n                        value={el.itemNote}\r\n                        type=\"text\"\r\n                        label=\"Note\"\r\n                        InputProps={{\r\n                          rows: 3,\r\n                        }}\r\n                      />\r\n                    </Box>\r\n                  </Box>\r\n                ))}\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n          <Box width=\"100%\" py={2} display=\"flex\" justifyContent=\"flex-end\">\r\n            <Button onClick={handleSubmit} variant=\"contained\" color=\"primary\">\r\n              Request\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\HomePage\\HomePage.tsx",["277","278","279","280","281","282","283","284","285","286","287","288","289","290","291"],"import {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  makeStyles,\r\n  Theme,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport React, { ReactElement, useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { useRecoilState, useRecoilValue } from 'recoil';\r\nimport useFetchDeliveryHistory from '../../effects/queries/delivery/useFetchDeliveryHistory';\r\nimport useFetchRequest from '../../effects/queries/delivery/useFetchRequest';\r\nimport { DeliveryHistory } from '../../models/Delivery';\r\nimport userState from '../../states/UserState';\r\nimport formatDateAndTime from '../../utils/formatDateAndTime';\r\nimport AdminHome from './Sections/AdminHome';\r\nimport UserHome from './Sections/UserHome';\r\n\r\ninterface Props {}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  card: {\r\n    width: '33%',\r\n    marginRight: '8px',\r\n  },\r\n  none: {\r\n    display: 'none',\r\n  },\r\n}));\r\n\r\nexport default function HomePage({}: Props): ReactElement {\r\n  const user = useRecoilValue(userState);\r\n\r\n  return <>{user?.user.role === 'user' ? <UserHome /> : <AdminHome />}</>;\r\n}\r\n","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\LoginPage\\LoginPage.tsx",["292","293","294","295","296","297","298"],"import {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  makeStyles,\r\n  TextField,\r\n  Theme,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport React, { ReactElement } from 'react';\r\nimport { useRecoilState, useSetRecoilState } from 'recoil';\r\nimport useLogin from '../../effects/mutations/auth/useLogin';\r\nimport useAuthenticate from '../../effects/queries/auth/useAuthenticate';\r\nimport userState from '../../states/UserState';\r\nimport { eraseCookie, setCookie } from '../../utils/cookies';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport FieldInfo from '../../components/Loading/FieldInfo';\r\nimport getErrorResponse from '../../utils/getErrorResponse';\r\nimport ErrorBox from '../../components/ErrorBox/ErrorBox';\r\n\r\ninterface Props {}\r\n\r\nconst initialValues = {\r\n  email: '',\r\n  password: '',\r\n};\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  card: {\r\n    width: '500px',\r\n    height: '500px',\r\n  },\r\n  cardContent: {\r\n    height: '100%',\r\n  },\r\n  form: {\r\n    width: '100%',\r\n    '& > *': {\r\n      marginBottom: theme.spacing(3),\r\n    },\r\n  },\r\n  firstInput: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst fields: FieldInfo = {\r\n  email: { label: 'Email' },\r\n  password: { label: 'Password', type: 'password' },\r\n};\r\n\r\nexport default function LoginPage({}: Props): ReactElement {\r\n  const classes = useStyles();\r\n\r\n  const [login, { isLoading, error }] = useLogin({\r\n    onError() {\r\n      setFieldValue('password', '');\r\n      setFieldTouched('password', false);\r\n    },\r\n    onSuccess(data) {\r\n      console.log(data);\r\n      setCookie('tkn', data.token, 7);\r\n      setUserData({ user: data.data, token: data.token });\r\n    },\r\n  });\r\n\r\n  const setUserData = useSetRecoilState(userState);\r\n\r\n  const {\r\n    handleSubmit,\r\n    values,\r\n    setFieldValue,\r\n    getFieldProps,\r\n    setFieldTouched,\r\n    errors,\r\n    touched,\r\n  } = useFormik({\r\n    initialValues,\r\n    validationSchema: Yup.object().shape({\r\n      email: Yup.string()\r\n        .label('Email')\r\n        .email('Invalid email address')\r\n        .required(),\r\n      password: Yup.string().label('Password').required(),\r\n    }),\r\n    onSubmit: (values) => {\r\n      login(values as any);\r\n    },\r\n  });\r\n\r\n  const handleLogin = (e: any) => {\r\n    e.preventDefault();\r\n    handleSubmit(e);\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      width=\"100vw\"\r\n      height=\"100vh\"\r\n      top={0}\r\n      position=\"fixed\"\r\n      display=\"flex\"\r\n      flexDirection=\"column\"\r\n      justifyContent=\"center\"\r\n      alignItems=\"center\">\r\n      <Card className={classes.card}>\r\n        <CardContent className={classes.cardContent}>\r\n          <Box\r\n            height=\"30%\"\r\n            color=\"#3f51b5\"\r\n            display=\"flex\"\r\n            flexDirection=\"column\"\r\n            justifyContent=\"center\">\r\n            <Typography variant=\"h3\" color=\"inherit\">\r\n              Login\r\n            </Typography>\r\n          </Box>\r\n          <Box\r\n            height=\"70%\"\r\n            display=\"flex\"\r\n            flexDirection=\"column\"\r\n            justifyContent=\"flex-start\">\r\n            <form onSubmit={handleLogin} className={classes.form}>\r\n              {Object.keys(values).map((key, idx) => (\r\n                <TextField\r\n                  key={key}\r\n                  className={idx === 0 ? classes.firstInput : ''}\r\n                  {...getFieldProps(key)}\r\n                  size=\"small\"\r\n                  fullWidth\r\n                  variant=\"outlined\"\r\n                  label={fields[key].label}\r\n                  type={fields[key].type || 'text'}\r\n                  color=\"primary\"\r\n                />\r\n              ))}\r\n              {error && (\r\n                <ErrorBox\r\n                  message={\r\n                    getErrorResponse(error)?.message || 'Something went wrong'\r\n                  }\r\n                />\r\n              )}\r\n\r\n              <Box py={2} width=\"100%\">\r\n                <Button\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  type=\"submit\">\r\n                  Login\r\n                </Button>\r\n              </Box>\r\n            </form>\r\n          </Box>\r\n        </CardContent>\r\n      </Card>\r\n    </Box>\r\n  );\r\n}\r\n","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\routes\\MainRoute.tsx",["299"],"import { Box } from '@material-ui/core';\r\nimport React, { ReactElement } from 'react';\r\nimport { Route, Switch } from 'react-router';\r\nimport Navbar from '../components/Navbar/Navbar';\r\nimport HomePage from '../pages/HomePage/HomePage';\r\nimport LoginPage from '../pages/LoginPage/LoginPage';\r\nimport PageNotFound from '../pages/PageNotFound/PageNotFound';\r\nimport RequestDeliveryPage from '../pages/RequestDeliveryPage/RequestDeliveryPage';\r\nimport SetWorkingHourPage from '../pages/SetWorkingHourPage/SetWorkingHourPage';\r\nimport ViewDeliveryHistoryPage from '../pages/ViewDeliveryHistoryPage/ViewDeliveryHistoryPage';\r\nimport ViewDeliveryStatusPage from '../pages/ViewDeliveryStatusPage/ViewDeliveryStatusPage';\r\nimport ViewRequestPage from '../pages/ViewRequestPage/ViewRequestPage';\r\nimport ViewWorkingHourPage from '../pages/ViewWorkingHourPage/ViewWorkingHourPage';\r\n\r\ninterface Props {}\r\n\r\nexport default function MainRoute({}: Props): ReactElement {\r\n  return (\r\n    <Box>\r\n      <Navbar />\r\n      <Switch>\r\n        <Route exact path=\"/\" component={HomePage} />\r\n        <Route exact path=\"/home\" component={HomePage} />\r\n        <Route exact path=\"/login\" component={LoginPage} />\r\n        <Route exact path=\"/request-delivery\" component={RequestDeliveryPage} />\r\n        <Route\r\n          exact\r\n          path=\"/view-delivery-history\"\r\n          component={ViewDeliveryHistoryPage}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/view-working-hour\"\r\n          component={ViewWorkingHourPage}\r\n        />\r\n        <Route exact path=\"/view-request\" component={ViewRequestPage} />\r\n        <Route exact path=\"/set-working-hour\" component={SetWorkingHourPage} />\r\n        <Route\r\n          exact\r\n          path=\"/view-delivery-status\"\r\n          component={ViewDeliveryStatusPage}\r\n        />\r\n        <Route path=\"*\" component={PageNotFound} />\r\n      </Switch>\r\n    </Box>\r\n  );\r\n}\r\n","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\states\\UserState.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\queries\\auth\\useAuthenticate.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\auth\\authenticate.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\fetch.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\mutations\\mutationWrapper.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\auth\\login.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\components\\Loading\\Loading.tsx",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\components\\ErrorBox\\ErrorBox.tsx",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\mutations\\auth\\useLogin.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\mutations\\delivery\\useCreateDelivery.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\delivery\\createDelivery.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\utils\\cookies.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\utils\\getErrorResponse.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\queries\\delivery\\useFetchDeliveryHistory.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\queries\\queryWrapper.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\utils\\formatDateAndTime.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\delivery\\fetchDeliveryHistory.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\queries\\delivery\\useFetchRequest.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\delivery\\fetchRequest.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\mutations\\delivery\\useCancelDelivery.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\delivery\\cancelDelivery.ts",["300"],"import { PostDelivery } from '../../models/Delivery';\r\nimport getFetchInstance from '../fetch';\r\n\r\nexport default async function cancelDelivery(id: string) {\r\n  const res = await getFetchInstance().post('/cancel-delivery', { id: id });\r\n  console.log(res);\r\n}\r\n","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\queries\\workhour\\useFetchWorkHour.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\workhour\\fetchWorkHour.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\queries\\delivery\\useFetchAdminPending.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\delivery\\fetchAdminPending.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\queries\\delivery\\useFetchAdminDelivered.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\delivery\\fetchAdminDelivered.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\mutations\\delivery\\useUpdateStatusDelivery.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\delivery\\updateStatusDelivery.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\mutations\\workhour\\useCreateWorkHour.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\workhour\\createWorkHour.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\mutations\\workhour\\useDeleteWorkHour.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\workhour\\deleteWorkHour.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\HomePage\\Sections\\UserHome.tsx",["301","302","303","304"],"import {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  makeStyles,\r\n  Theme,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport React, { ReactElement, useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { useRecoilState, useRecoilValue } from 'recoil';\r\nimport useFetchDeliveryHistory from '../../../effects/queries/delivery/useFetchDeliveryHistory';\r\nimport useFetchRequest from '../../../effects/queries/delivery/useFetchRequest';\r\nimport {\r\n  DeliveryHistory,\r\n  DeliveryHistoryDetail,\r\n} from '../../../models/Delivery';\r\nimport userState from '../../../states/UserState';\r\nimport formatDateAndTime from '../../../utils/formatDateAndTime';\r\n\r\ninterface Props {}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  card: {\r\n    marginRight: '8px',\r\n    flexGrow: 1,\r\n  },\r\n  none: {\r\n    display: 'none',\r\n  },\r\n}));\r\n\r\nexport default function UserHome({}: Props): ReactElement {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n\r\n  const { data: dataRequest } = useFetchRequest();\r\n  const { data: dataDelivery } = useFetchDeliveryHistory();\r\n\r\n  const [recentDataRequest, setRecentDataRequest] = useState<\r\n    DeliveryHistoryDetail[]\r\n  >([]);\r\n  const [recentDataDelivery, setRecentDataDelivery] = useState<\r\n    DeliveryHistory[]\r\n  >([]);\r\n\r\n  useEffect(() => {\r\n    if (!dataRequest) return;\r\n    let newArr: DeliveryHistoryDetail[] = [];\r\n    let idx = 0;\r\n    for (let i = 0; i < dataRequest.length; i++) {\r\n      for (let j = 0; j < dataRequest[i].details.length; j++) {\r\n        if (idx > 2) break;\r\n        newArr.push(dataRequest[i].details[j]);\r\n        idx = idx + 1;\r\n      }\r\n    }\r\n\r\n    setRecentDataRequest(newArr);\r\n  }, [dataRequest]);\r\n\r\n  useEffect(() => {\r\n    if (!dataDelivery) return;\r\n    let newArr: DeliveryHistory[] = [];\r\n    if (dataDelivery.length > 2) {\r\n      for (let index = 0; index < 3; index++) {\r\n        newArr.push(dataDelivery[index]);\r\n      }\r\n    } else {\r\n      for (let index = 0; index < dataDelivery.length; index++) {\r\n        newArr.push(dataDelivery[index]);\r\n      }\r\n    }\r\n    setRecentDataDelivery(newArr);\r\n  }, [dataDelivery]);\r\n\r\n  console.log(recentDataRequest);\r\n\r\n  return (\r\n    <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\r\n      <Box\r\n        p={2}\r\n        py={4}\r\n        width=\"80%\"\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        alignItems=\"center\">\r\n        <Box py={2} display=\"flex\" justifyContent=\"space-between\" width=\"100%\">\r\n          <Typography variant=\"h5\">Recent Request</Typography>\r\n          <Button onClick={() => history.push('/view-request')} color=\"primary\">\r\n            View More\r\n          </Button>\r\n        </Box>\r\n        <Box width=\"100%\" display=\"flex\">\r\n          {recentDataRequest.map((el, index) => (\r\n            <Card key={index} className={classes.card}>\r\n              <CardContent>\r\n                <Box\r\n                  width=\"100%\"\r\n                  display=\"flex\"\r\n                  flexDirection=\"column\"\r\n                  alignItems=\"flex-start\">\r\n                  <Typography>Delivery ID : {el.id}</Typography>\r\n                  <Typography>\r\n                    Date : {formatDateAndTime(el.created_at)}\r\n                  </Typography>\r\n                </Box>\r\n                <Box\r\n                  width=\"100%\"\r\n                  display=\"flex\"\r\n                  justifyContent=\"space-between\"\r\n                  alignItems=\"center\">\r\n                  <Box\r\n                    py={2}\r\n                    display=\"flex\"\r\n                    flexDirection=\"column\"\r\n                    alignItems=\"flex-start\">\r\n                    <Typography>To : {el.room_destination}</Typography>\r\n                    <Typography>Receiver : {el.to}</Typography>\r\n                  </Box>\r\n                  <Typography>Status : {el.status}</Typography>\r\n                </Box>\r\n              </CardContent>\r\n            </Card>\r\n          ))}\r\n        </Box>\r\n      </Box>\r\n      <Box\r\n        py={4}\r\n        p={2}\r\n        width=\"80%\"\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        alignItems=\"center\">\r\n        <Box py={2} display=\"flex\" justifyContent=\"space-between\" width=\"100%\">\r\n          <Typography variant=\"h5\">Recent History</Typography>\r\n          <Button\r\n            onClick={() => history.push('/view-delivery-history')}\r\n            color=\"primary\">\r\n            View More\r\n          </Button>\r\n        </Box>\r\n        <Box width=\"100%\" display=\"flex\">\r\n          {recentDataDelivery.map((el, index) => (\r\n            <Card key={index} className={classes.card}>\r\n              <CardContent>\r\n                <Box width=\"100%\" display=\"flex\" justifyContent=\"space-between\">\r\n                  <Typography>Delivery ID : {el.id}</Typography>\r\n                  <Typography>\r\n                    Date : {formatDateAndTime(el.create_at)}\r\n                  </Typography>\r\n                </Box>\r\n                <Box width=\"100%\" display=\"flex\" justifyContent=\"space-between\">\r\n                  <Typography>From : {el.from}</Typography>\r\n                  <Typography>Total Items : {el.details.length}</Typography>\r\n                </Box>\r\n              </CardContent>\r\n            </Card>\r\n          ))}\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\HomePage\\Sections\\AdminHome.tsx",["305","306","307","308"],"import {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  makeStyles,\r\n  Theme,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport React, { ReactElement, useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { useRecoilValue } from 'recoil';\r\nimport useFetchAdminPending from '../../../effects/queries/delivery/useFetchAdminPending';\r\nimport useFetchWorkHour from '../../../effects/queries/workhour/useFetchWorkHour';\r\nimport {\r\n  DeliveryHistory,\r\n  DeliveryHistoryDetail,\r\n} from '../../../models/Delivery';\r\nimport { WorkHour } from '../../../models/Workhour';\r\nimport userState from '../../../states/UserState';\r\nimport formatDateAndTime from '../../../utils/formatDateAndTime';\r\n\r\ninterface Props {}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  card: {\r\n    marginRight: '8px',\r\n    flexGrow: 1,\r\n  },\r\n  none: {\r\n    display: 'none',\r\n  },\r\n}));\r\n\r\nexport default function AdminHome({}: Props): ReactElement {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n\r\n  const { data: dataAdminPending } = useFetchAdminPending();\r\n  const { data: dataWorkHour } = useFetchWorkHour('');\r\n\r\n  const [recentAdminPending, setRecentAdminPending] = useState<\r\n    DeliveryHistoryDetail[]\r\n  >([]);\r\n  const [recentWorkHour, setRecentWorkHour] = useState<WorkHour[]>([]);\r\n\r\n  useEffect(() => {\r\n    if (!dataAdminPending) return;\r\n    let newArr: DeliveryHistoryDetail[] = [];\r\n    let idx = 0;\r\n    for (let i = 0; i < dataAdminPending.length; i++) {\r\n      for (let j = 0; j < dataAdminPending[i].details.length; j++) {\r\n        if (idx > 2) break;\r\n        newArr.push(dataAdminPending[i].details[j]);\r\n        idx = idx + 1;\r\n      }\r\n    }\r\n    setRecentAdminPending(newArr);\r\n  }, [dataAdminPending]);\r\n\r\n  useEffect(() => {\r\n    if (!dataWorkHour) return;\r\n    let newArr: WorkHour[] = [];\r\n    if (dataWorkHour.length > 2) {\r\n      for (let index = 0; index < 3; index++) {\r\n        newArr.push(dataWorkHour[index]);\r\n      }\r\n    } else {\r\n      for (let index = 0; index < dataWorkHour.length; index++) {\r\n        newArr.push(dataWorkHour[index]);\r\n      }\r\n    }\r\n    setRecentWorkHour(newArr);\r\n  }, [dataWorkHour]);\r\n\r\n  return (\r\n    <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\r\n      <Box\r\n        p={2}\r\n        py={4}\r\n        width=\"80%\"\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        alignItems=\"center\">\r\n        <Box py={2} display=\"flex\" justifyContent=\"space-between\" width=\"100%\">\r\n          <Typography variant=\"h5\">Recent Pending Delivery</Typography>\r\n          <Button\r\n            onClick={() => history.push('/view-delivery-status')}\r\n            color=\"primary\">\r\n            View More\r\n          </Button>\r\n        </Box>\r\n        <Box width=\"100%\" display=\"flex\">\r\n          {recentAdminPending.map((el, index) => (\r\n            <Card key={index} className={classes.card}>\r\n              <CardContent>\r\n                <Box\r\n                  width=\"100%\"\r\n                  display=\"flex\"\r\n                  flexDirection=\"column\"\r\n                  alignItems=\"flex-start\">\r\n                  <Typography>Delivery ID : {el.id}</Typography>\r\n                  <Typography>\r\n                    Date : {formatDateAndTime(el.created_at)}\r\n                  </Typography>\r\n                </Box>\r\n                <Box\r\n                  width=\"100%\"\r\n                  display=\"flex\"\r\n                  justifyContent=\"space-between\"\r\n                  alignItems=\"center\">\r\n                  <Box\r\n                    py={2}\r\n                    display=\"flex\"\r\n                    flexDirection=\"column\"\r\n                    alignItems=\"flex-start\">\r\n                    <Typography>To : {el.room_destination}</Typography>\r\n                    <Typography>Receiver : {el.to}</Typography>\r\n                  </Box>\r\n                  <Typography>Status : {el.status}</Typography>\r\n                </Box>\r\n              </CardContent>\r\n            </Card>\r\n          ))}\r\n        </Box>\r\n      </Box>\r\n      <Box\r\n        py={4}\r\n        p={2}\r\n        width=\"80%\"\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        alignItems=\"center\">\r\n        <Box py={2} display=\"flex\" justifyContent=\"space-between\" width=\"100%\">\r\n          <Typography variant=\"h5\">Recent Work Hour</Typography>\r\n          <Button\r\n            onClick={() => history.push('/set-working-hour')}\r\n            color=\"primary\">\r\n            View More\r\n          </Button>\r\n        </Box>\r\n        <Box width=\"100%\" display=\"flex\">\r\n          {recentWorkHour.map((el, index) => (\r\n            <Card key={index} className={classes.card}>\r\n              <CardContent>\r\n                <Box width=\"100%\" display=\"flex\" justifyContent=\"space-between\">\r\n                  <Typography>From : {el.from}</Typography>\r\n                  <Typography>To : {el.to}</Typography>\r\n                </Box>\r\n                <Box\r\n                  width=\"100%\"\r\n                  display=\"flex\"\r\n                  flexDirection=\"column\"\r\n                  alignItems=\"flex-start\">\r\n                  <Typography>Note :</Typography>\r\n                  <Typography>{el.note} </Typography>\r\n                </Box>\r\n              </CardContent>\r\n            </Card>\r\n          ))}\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\components\\FullScreenLoading\\FullScreenLoading.tsx",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\components\\NotificationModal\\ErrorModal.tsx",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\components\\NotificationModal\\NotificationModal.tsx",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\components\\NotificationModal\\SuccessModal.tsx",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\pages\\ViewQueuePage\\ViewQueuePage.tsx",["309"],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\effects\\queries\\delivery\\useFetchQueue.ts",[],"D:\\ASLAB\\RIG2\\ReCourSy\\recoursy-frontend\\src\\api\\delivery\\fetchQueue.ts",[],{"ruleId":"310","replacedBy":"311"},{"ruleId":"312","replacedBy":"313"},{"ruleId":"314","severity":1,"message":"315","line":2,"column":8,"nodeType":"316","messageId":"317","endLine":2,"endColumn":12},{"ruleId":"314","severity":1,"message":"318","line":7,"column":34,"nodeType":"316","messageId":"317","endLine":7,"endColumn":43},{"ruleId":"314","severity":1,"message":"319","line":20,"column":9,"nodeType":"316","messageId":"317","endLine":20,"endColumn":16},{"ruleId":"314","severity":1,"message":"320","line":9,"column":3,"nodeType":"316","messageId":"317","endLine":9,"endColumn":7},{"ruleId":"314","severity":1,"message":"321","line":15,"column":8,"nodeType":"316","messageId":"317","endLine":15,"endColumn":31},{"ruleId":"314","severity":1,"message":"322","line":20,"column":26,"nodeType":"316","messageId":"317","endLine":20,"endColumn":43},{"ruleId":"323","severity":1,"message":"324","line":91,"column":32,"nodeType":"325","messageId":"326","endLine":91,"endColumn":41},{"ruleId":"323","severity":1,"message":"324","line":5,"column":30,"nodeType":"325","messageId":"326","endLine":5,"endColumn":39},{"ruleId":"323","severity":1,"message":"324","line":6,"column":38,"nodeType":"325","messageId":"326","endLine":6,"endColumn":47},{"ruleId":"323","severity":1,"message":"324","line":45,"column":48,"nodeType":"325","messageId":"326","endLine":45,"endColumn":57},{"ruleId":"327","severity":1,"message":"328","line":73,"column":38,"nodeType":"329","messageId":"330","endLine":73,"endColumn":40},{"ruleId":"327","severity":1,"message":"328","line":82,"column":40,"nodeType":"329","messageId":"330","endLine":82,"endColumn":42},{"ruleId":"314","severity":1,"message":"331","line":40,"column":7,"nodeType":"316","messageId":"317","endLine":40,"endColumn":11},{"ruleId":"323","severity":1,"message":"324","line":51,"column":44,"nodeType":"325","messageId":"326","endLine":51,"endColumn":53},{"ruleId":"323","severity":1,"message":"324","line":35,"column":45,"nodeType":"325","messageId":"326","endLine":35,"endColumn":54},{"ruleId":"314","severity":1,"message":"332","line":38,"column":18,"nodeType":"316","messageId":"317","endLine":38,"endColumn":27},{"ruleId":"314","severity":1,"message":"333","line":6,"column":3,"nodeType":"316","messageId":"317","endLine":6,"endColumn":7},{"ruleId":"314","severity":1,"message":"334","line":7,"column":3,"nodeType":"316","messageId":"317","endLine":7,"endColumn":11},{"ruleId":"323","severity":1,"message":"324","line":39,"column":41,"nodeType":"325","messageId":"326","endLine":39,"endColumn":50},{"ruleId":"323","severity":1,"message":"324","line":37,"column":49,"nodeType":"325","messageId":"326","endLine":37,"endColumn":58},{"ruleId":"323","severity":1,"message":"324","line":27,"column":45,"nodeType":"325","messageId":"326","endLine":27,"endColumn":54},{"ruleId":"314","severity":1,"message":"335","line":2,"column":3,"nodeType":"316","messageId":"317","endLine":2,"endColumn":6},{"ruleId":"314","severity":1,"message":"336","line":3,"column":3,"nodeType":"316","messageId":"317","endLine":3,"endColumn":9},{"ruleId":"314","severity":1,"message":"337","line":4,"column":3,"nodeType":"316","messageId":"317","endLine":4,"endColumn":7},{"ruleId":"314","severity":1,"message":"338","line":5,"column":3,"nodeType":"316","messageId":"317","endLine":5,"endColumn":14},{"ruleId":"314","severity":1,"message":"339","line":8,"column":3,"nodeType":"316","messageId":"317","endLine":8,"endColumn":13},{"ruleId":"314","severity":1,"message":"340","line":10,"column":31,"nodeType":"316","messageId":"317","endLine":10,"endColumn":40},{"ruleId":"314","severity":1,"message":"341","line":10,"column":42,"nodeType":"316","messageId":"317","endLine":10,"endColumn":50},{"ruleId":"314","severity":1,"message":"342","line":11,"column":10,"nodeType":"316","messageId":"317","endLine":11,"endColumn":20},{"ruleId":"314","severity":1,"message":"343","line":12,"column":10,"nodeType":"316","messageId":"317","endLine":12,"endColumn":24},{"ruleId":"314","severity":1,"message":"344","line":13,"column":8,"nodeType":"316","messageId":"317","endLine":13,"endColumn":31},{"ruleId":"314","severity":1,"message":"345","line":14,"column":8,"nodeType":"316","messageId":"317","endLine":14,"endColumn":23},{"ruleId":"314","severity":1,"message":"346","line":15,"column":10,"nodeType":"316","messageId":"317","endLine":15,"endColumn":25},{"ruleId":"314","severity":1,"message":"347","line":17,"column":8,"nodeType":"316","messageId":"317","endLine":17,"endColumn":25},{"ruleId":"314","severity":1,"message":"348","line":23,"column":7,"nodeType":"316","messageId":"317","endLine":23,"endColumn":16},{"ruleId":"323","severity":1,"message":"324","line":33,"column":34,"nodeType":"325","messageId":"326","endLine":33,"endColumn":43},{"ruleId":"314","severity":1,"message":"343","line":12,"column":10,"nodeType":"316","messageId":"317","endLine":12,"endColumn":24},{"ruleId":"314","severity":1,"message":"349","line":14,"column":8,"nodeType":"316","messageId":"317","endLine":14,"endColumn":23},{"ruleId":"314","severity":1,"message":"350","line":16,"column":10,"nodeType":"316","messageId":"317","endLine":16,"endColumn":21},{"ruleId":"323","severity":1,"message":"324","line":54,"column":35,"nodeType":"325","messageId":"326","endLine":54,"endColumn":44},{"ruleId":"314","severity":1,"message":"351","line":57,"column":19,"nodeType":"316","messageId":"317","endLine":57,"endColumn":28},{"ruleId":"314","severity":1,"message":"352","line":77,"column":5,"nodeType":"316","messageId":"317","endLine":77,"endColumn":11},{"ruleId":"314","severity":1,"message":"353","line":78,"column":5,"nodeType":"316","messageId":"317","endLine":78,"endColumn":12},{"ruleId":"323","severity":1,"message":"324","line":17,"column":35,"nodeType":"325","messageId":"326","endLine":17,"endColumn":44},{"ruleId":"314","severity":1,"message":"354","line":1,"column":10,"nodeType":"316","messageId":"317","endLine":1,"endColumn":22},{"ruleId":"314","severity":1,"message":"343","line":12,"column":10,"nodeType":"316","messageId":"317","endLine":12,"endColumn":24},{"ruleId":"314","severity":1,"message":"355","line":12,"column":26,"nodeType":"316","messageId":"317","endLine":12,"endColumn":40},{"ruleId":"314","severity":1,"message":"356","line":19,"column":8,"nodeType":"316","messageId":"317","endLine":19,"endColumn":17},{"ruleId":"323","severity":1,"message":"324","line":34,"column":34,"nodeType":"325","messageId":"326","endLine":34,"endColumn":43},{"ruleId":"314","severity":1,"message":"355","line":12,"column":10,"nodeType":"316","messageId":"317","endLine":12,"endColumn":24},{"ruleId":"314","severity":1,"message":"346","line":16,"column":3,"nodeType":"316","messageId":"317","endLine":16,"endColumn":18},{"ruleId":"314","severity":1,"message":"356","line":20,"column":8,"nodeType":"316","messageId":"317","endLine":20,"endColumn":17},{"ruleId":"323","severity":1,"message":"324","line":35,"column":35,"nodeType":"325","messageId":"326","endLine":35,"endColumn":44},{"ruleId":"323","severity":1,"message":"324","line":22,"column":39,"nodeType":"325","messageId":"326","endLine":22,"endColumn":48},"no-native-reassign",["357"],"no-negated-in-lhs",["358"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'setCookie' is defined but never used.","'history' is assigned a value but never used.","'Menu' is defined but never used.","'NotificationsActiveIcon' is defined but never used.","'useSetRecoilState' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'data' is assigned a value but never used.","'setSearch' is assigned a value but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'Box' is defined but never used.","'Button' is defined but never used.","'Card' is defined but never used.","'CardContent' is defined but never used.","'Typography' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'useHistory' is defined but never used.","'useRecoilState' is defined but never used.","'useFetchDeliveryHistory' is defined but never used.","'useFetchRequest' is defined but never used.","'DeliveryHistory' is defined but never used.","'formatDateAndTime' is defined but never used.","'useStyles' is assigned a value but never used.","'useAuthenticate' is defined but never used.","'eraseCookie' is defined but never used.","'isLoading' is assigned a value but never used.","'errors' is assigned a value but never used.","'touched' is assigned a value but never used.","'PostDelivery' is defined but never used.","'useRecoilValue' is defined but never used.","'userState' is defined but never used.","no-global-assign","no-unsafe-negation"]